
I2C_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005904  08005904  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800590c  0800590c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08005914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000e0  080059f4  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080059f4  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef42  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c2  00000000  00000000  0002f052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00031218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00031e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023375  00000000  00000000  000329f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea3a  00000000  00000000  00055d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1c75  00000000  00000000  0006479f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a40  00000000  00000000  00136464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057d0 	.word	0x080057d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	080057d0 	.word	0x080057d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	db0b      	blt.n	800059e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f003 021f 	and.w	r2, r3, #31
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <__NVIC_EnableIRQ+0x38>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	095b      	lsrs	r3, r3, #5
 8000594:	2001      	movs	r0, #1
 8000596:	fa00 f202 	lsl.w	r2, r0, r2
 800059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000e100 	.word	0xe000e100

080005b0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <__io_putchar+0x20>)
 80005c2:	f003 f883 	bl	80036cc <HAL_UART_Transmit>
	return ch;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000160 	.word	0x20000160

080005d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005da:	f000 fb86 	bl	8000cea <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005de:	f000 f869 	bl	80006b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e2:	f000 f91d 	bl	8000820 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005e6:	f000 f8e9 	bl	80007bc <MX_USART2_UART_Init>
	MX_SPI2_Init();
 80005ea:	f000 f8a9 	bl	8000740 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET); // set SS
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f000 ff1a 	bl	8001430 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f000 fbe8 	bl	8000dd4 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1){
		HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET); // SS at zero to start communication sequence
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f000 ff0f 	bl	8001430 <HAL_GPIO_WritePin>
		printf("start of communication\r\n");
 8000612:	4821      	ldr	r0, [pc, #132]	; (8000698 <main+0xc4>)
 8000614:	f004 f95e 	bl	80048d4 <puts>
		HAL_SPI_Transmit(&hspi2, query, sizeof(query)/sizeof(query[0]),1000); // send query
 8000618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061c:	2205      	movs	r2, #5
 800061e:	491f      	ldr	r1, [pc, #124]	; (800069c <main+0xc8>)
 8000620:	481f      	ldr	r0, [pc, #124]	; (80006a0 <main+0xcc>)
 8000622:	f002 f998 	bl	8002956 <HAL_SPI_Transmit>
		// print query
		printf("<< transmission buffer : \r\n");
 8000626:	481f      	ldr	r0, [pc, #124]	; (80006a4 <main+0xd0>)
 8000628:	f004 f954 	bl	80048d4 <puts>
		for(int i = 0; i<sizeof(query); i++){
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	e00a      	b.n	8000648 <main+0x74>
			printf("0x%X\r\n", query[i]);
 8000632:	4a1a      	ldr	r2, [pc, #104]	; (800069c <main+0xc8>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	481a      	ldr	r0, [pc, #104]	; (80006a8 <main+0xd4>)
 800063e:	f004 f8c3 	bl	80047c8 <iprintf>
		for(int i = 0; i<sizeof(query); i++){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3301      	adds	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d9f1      	bls.n	8000632 <main+0x5e>
		}
		// 200 us delay
		HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 feea 	bl	8001430 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f000 fbb9 	bl	8000dd4 <HAL_Delay>
		HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f000 fee0 	bl	8001430 <HAL_GPIO_WritePin>
		// response of MOSI
		HAL_SPI_Receive(&hspi2, (uint8_t*)buffRX_SPI,R_INTERNAL_SIZE_WHO_I_AM_RESPONSE,1000);
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <main+0xd8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29a      	uxth	r2, r3
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <main+0xdc>)
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0xcc>)
 800067e:	f002 fad8 	bl	8002c32 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f000 fed0 	bl	8001430 <HAL_GPIO_WritePin>
		HAL_Delay(200);		/* USER CODE END WHILE */
 8000690:	20c8      	movs	r0, #200	; 0xc8
 8000692:	f000 fb9f 	bl	8000dd4 <HAL_Delay>
		HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,GPIO_PIN_RESET); // SS at zero to start communication sequence
 8000696:	e7b5      	b.n	8000604 <main+0x30>
 8000698:	080057e8 	.word	0x080057e8
 800069c:	20000068 	.word	0x20000068
 80006a0:	200000fc 	.word	0x200000fc
 80006a4:	08005800 	.word	0x08005800
 80006a8:	0800581c 	.word	0x0800581c
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000004 	.word	0x20000004

080006b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b096      	sub	sp, #88	; 0x58
 80006b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2244      	movs	r2, #68	; 0x44
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f878 	bl	80047b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006da:	f000 fecf 	bl	800147c <HAL_PWREx_ControlVoltageScaling>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80006e4:	f000 f900 	bl	80008e8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e8:	2310      	movs	r3, #16
 80006ea:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f4:	2360      	movs	r3, #96	; 0x60
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4618      	mov	r0, r3
 8000702:	f000 ff11 	bl	8001528 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 800070c:	f000 f8ec 	bl	80008e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fb11 	bl	8001d50 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000734:	f000 f8d8 	bl	80008e8 <Error_Handler>
	}
}
 8000738:	bf00      	nop
 800073a:	3758      	adds	r7, #88	; 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_SPI2_Init+0x74>)
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_SPI2_Init+0x78>)
 8000748:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_SPI2_Init+0x74>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_SPI2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI2_Init+0x74>)
 800075a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800075e:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_SPI2_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI2_Init+0x74>)
 800076e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000772:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI2_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI2_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_SPI2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI2_Init+0x74>)
 800078e:	2207      	movs	r2, #7
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_SPI2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI2_Init+0x74>)
 800079a:	2208      	movs	r2, #8
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_SPI2_Init+0x74>)
 80007a0:	f002 f836 	bl	8002810 <HAL_SPI_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 80007aa:	f000 f89d 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000fc 	.word	0x200000fc
 80007b8:	40003800 	.word	0x40003800

080007bc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_USART2_UART_Init+0x60>)
 80007c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x5c>)
 8000800:	f002 ff16 	bl	8003630 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800080a:	f000 f86d 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	NVIC_EnableIRQ(USART2_IRQn);
 800080e:	2026      	movs	r0, #38	; 0x26
 8000810:	f7ff feb0 	bl	8000574 <__NVIC_EnableIRQ>
	/* USER CODE END USART2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000160 	.word	0x20000160
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <MX_GPIO_Init+0xc0>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a29      	ldr	r2, [pc, #164]	; (80008e0 <MX_GPIO_Init+0xc0>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_GPIO_Init+0xc0>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_GPIO_Init+0xc0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <MX_GPIO_Init+0xc0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_GPIO_Init+0xc0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_GPIO_Init+0xc0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <MX_GPIO_Init+0xc0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_GPIO_Init+0xc0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, INTERNAL_LED_Pin|CS_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f248 0120 	movw	r1, #32800	; 0x8020
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f000 fdd2 	bl	8001430 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_GPIO_Init+0xc4>)
 8000894:	f000 fdcc 	bl	8001430 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : INTERNAL_LED_Pin CS_Pin */
	GPIO_InitStruct.Pin = INTERNAL_LED_Pin|CS_Pin;
 8000898:	f248 0320 	movw	r3, #32800	; 0x8020
 800089c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 fc42 	bl	800113c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_GPIO_Init+0xc4>)
 80008d2:	f000 fc33 	bl	800113c <HAL_GPIO_Init>

}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000400 	.word	0x48000400

080008e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	; 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <HAL_SPI_MspInit+0xb4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d144      	bne.n	80009e8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_SPI_MspInit+0xb8>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b6:	2305      	movs	r3, #5
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <HAL_SPI_MspInit+0xbc>)
 80009c2:	f000 fbbb 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d8:	2305      	movs	r3, #5
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <HAL_SPI_MspInit+0xc0>)
 80009e4:	f000 fbaa 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40003800 	.word	0x40003800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000800 	.word	0x48000800
 80009fc:	48000400 	.word	0x48000400

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0a2      	sub	sp, #136	; 0x88
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2260      	movs	r2, #96	; 0x60
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 fec9 	bl	80047b8 <memset>
  if(huart->Instance==USART2)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a24      	ldr	r2, [pc, #144]	; (8000abc <HAL_UART_MspInit+0xbc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d140      	bne.n	8000ab2 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fbab 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a48:	f7ff ff4e 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0xc0>)
 8000a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <HAL_UART_MspInit+0xc0>)
 8000a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a56:	6593      	str	r3, [r2, #88]	; 0x58
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_UART_MspInit+0xc0>)
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_UART_MspInit+0xc0>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0xc0>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_UART_MspInit+0xc0>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f000 fb4d 	bl	800113c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2026      	movs	r0, #38	; 0x26
 8000aa8:	f000 fa93 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aac:	2026      	movs	r0, #38	; 0x26
 8000aae:	f000 faac 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3788      	adds	r7, #136	; 0x88
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f940 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <USART2_IRQHandler+0x10>)
 8000b1e:	f002 fe69 	bl	80037f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000160 	.word	0x20000160

08000b2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e00a      	b.n	8000b54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4601      	mov	r1, r0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <_read+0x12>
	}

return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e009      	b.n	8000b8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fd15 	bl	80005b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf1      	blt.n	8000b78 <_write+0x12>
	}
	return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:

int _close(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:

int _isatty(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f003 fd94 	bl	8004764 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20010000 	.word	0x20010000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200001e4 	.word	0x200001e4
 8000c70:	20000200 	.word	0x20000200

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 fd53 	bl	8004770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cca:	f7ff fc83 	bl	80005d4 <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8000cdc:	08005914 	.word	0x08005914
  ldr r2, =_sbss
 8000ce0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8000ce4:	200001fc 	.word	0x200001fc

08000ce8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_IRQHandler>

08000cea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f961 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f80e 	bl	8000d1c <HAL_InitTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e001      	b.n	8000d10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0c:	f7ff fdf2 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_InitTick+0x6c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d023      	beq.n	8000d78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_InitTick+0x70>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_InitTick+0x6c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f96d 	bl	8001026 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10f      	bne.n	8000d72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d809      	bhi.n	8000d6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 f937 	bl	8000fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_InitTick+0x74>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e004      	b.n	8000d7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	e001      	b.n	8000d7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000078 	.word	0x20000078
 8000d8c:	20000070 	.word	0x20000070
 8000d90:	20000074 	.word	0x20000074

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000078 	.word	0x20000078
 8000db8:	200001e8 	.word	0x200001e8

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200001e8 	.word	0x200001e8

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000078 	.word	0x20000078

08000e1c <__NVIC_SetPriorityGrouping>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800103e:	b480      	push	{r7}
 8001040:	b085      	sub	sp, #20
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d008      	beq.n	8001068 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2204      	movs	r2, #4
 800105a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e022      	b.n	80010ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 020e 	bic.w	r2, r2, #14
 8001076:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	f003 021c 	and.w	r2, r3, #28
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d005      	beq.n	80010de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2204      	movs	r2, #4
 80010d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e029      	b.n	8001132 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 020e 	bic.w	r2, r2, #14
 80010ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0201 	bic.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f003 021c 	and.w	r2, r3, #28
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2101      	movs	r1, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
    }
  }
  return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e154      	b.n	80013f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8146 	beq.w	80013f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d005      	beq.n	800117c <HAL_GPIO_Init+0x40>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d130      	bne.n	80011de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b2:	2201      	movs	r2, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	f003 0201 	and.w	r2, r3, #1
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d017      	beq.n	800121a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d123      	bne.n	800126e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0203 	and.w	r2, r3, #3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80a0 	beq.w	80013f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 80012b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6613      	str	r3, [r2, #96]	; 0x60
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 80012be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c8:	4a53      	ldr	r2, [pc, #332]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f2:	d019      	beq.n	8001328 <HAL_GPIO_Init+0x1ec>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a49      	ldr	r2, [pc, #292]	; (800141c <HAL_GPIO_Init+0x2e0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d013      	beq.n	8001324 <HAL_GPIO_Init+0x1e8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a48      	ldr	r2, [pc, #288]	; (8001420 <HAL_GPIO_Init+0x2e4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00d      	beq.n	8001320 <HAL_GPIO_Init+0x1e4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a47      	ldr	r2, [pc, #284]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x1e0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a46      	ldr	r2, [pc, #280]	; (8001428 <HAL_GPIO_Init+0x2ec>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_GPIO_Init+0x1dc>
 8001314:	2304      	movs	r3, #4
 8001316:	e008      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001318:	2307      	movs	r3, #7
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 800131c:	2303      	movs	r3, #3
 800131e:	e004      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001320:	2302      	movs	r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001328:	2300      	movs	r3, #0
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	f002 0203 	and.w	r2, r2, #3
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	4093      	lsls	r3, r2
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800133a:	4937      	ldr	r1, [pc, #220]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800136c:	4a2f      	ldr	r2, [pc, #188]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001396:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	f47f aea3 	bne.w	800114c <HAL_GPIO_Init+0x10>
  }
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000
 800141c:	48000400 	.word	0x48000400
 8001420:	48000800 	.word	0x48000800
 8001424:	48000c00 	.word	0x48000c00
 8001428:	48001000 	.word	0x48001000
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800144c:	e002      	b.n	8001454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_PWREx_GetVoltageRange+0x18>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40007000 	.word	0x40007000

0800147c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148a:	d130      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001498:	d038      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2232      	movs	r2, #50	; 0x32
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c0:	e002      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d4:	d102      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f2      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e8:	d110      	bne.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e00f      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fa:	d007      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40007000 	.word	0x40007000
 8001520:	20000070 	.word	0x20000070
 8001524:	431bde83 	.word	0x431bde83

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	f000 bc02 	b.w	8001d40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153c:	4b96      	ldr	r3, [pc, #600]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001546:	4b94      	ldr	r3, [pc, #592]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80e4 	beq.w	8001726 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_RCC_OscConfig+0x4c>
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	f040 808b 	bne.w	8001682 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b01      	cmp	r3, #1
 8001570:	f040 8087 	bne.w	8001682 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001574:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_OscConfig+0x64>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e3d9      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_RCC_OscConfig+0x7e>
 800159c:	4b7e      	ldr	r3, [pc, #504]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a4:	e005      	b.n	80015b2 <HAL_RCC_OscConfig+0x8a>
 80015a6:	4b7c      	ldr	r3, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d223      	bcs.n	80015fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fd8c 	bl	80020d8 <RCC_SetFlashLatencyFromMSIRange>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e3ba      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ca:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b70      	ldr	r3, [pc, #448]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	496d      	ldr	r1, [pc, #436]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e8:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	4968      	ldr	r1, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e025      	b.n	800164a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fe:	4b66      	ldr	r3, [pc, #408]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a65      	ldr	r2, [pc, #404]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4960      	ldr	r1, [pc, #384]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161c:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	495b      	ldr	r1, [pc, #364]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd4c 	bl	80020d8 <RCC_SetFlashLatencyFromMSIRange>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e37a      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800164a:	f000 fc81 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800164e:	4602      	mov	r2, r0
 8001650:	4b51      	ldr	r3, [pc, #324]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	4950      	ldr	r1, [pc, #320]	; (800179c <HAL_RCC_OscConfig+0x274>)
 800165c:	5ccb      	ldrb	r3, [r1, r3]
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	4a4e      	ldr	r2, [pc, #312]	; (80017a0 <HAL_RCC_OscConfig+0x278>)
 8001668:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800166a:	4b4e      	ldr	r3, [pc, #312]	; (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb54 	bl	8000d1c <HAL_InitTick>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d052      	beq.n	8001724 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	e35e      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d032      	beq.n	80016f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800168a:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a42      	ldr	r2, [pc, #264]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001696:	f7ff fb91 	bl	8000dbc <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169e:	f7ff fb8d 	bl	8000dbc <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e347      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a35      	ldr	r2, [pc, #212]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b33      	ldr	r3, [pc, #204]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4930      	ldr	r1, [pc, #192]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	492b      	ldr	r1, [pc, #172]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
 80016ee:	e01a      	b.n	8001726 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a28      	ldr	r2, [pc, #160]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb5e 	bl	8000dbc <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001704:	f7ff fb5a 	bl	8000dbc <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e314      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x1dc>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d073      	beq.n	800181a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x21c>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d10e      	bne.n	800175c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d10b      	bne.n	800175c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d063      	beq.n	8001818 <HAL_RCC_OscConfig+0x2f0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d15f      	bne.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e2f1      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001764:	d106      	bne.n	8001774 <HAL_RCC_OscConfig+0x24c>
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e025      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177c:	d114      	bne.n	80017a8 <HAL_RCC_OscConfig+0x280>
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a02      	ldr	r2, [pc, #8]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e013      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001798:	40021000 	.word	0x40021000
 800179c:	08005824 	.word	0x08005824
 80017a0:	20000070 	.word	0x20000070
 80017a4:	20000074 	.word	0x20000074
 80017a8:	4ba0      	ldr	r3, [pc, #640]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9f      	ldr	r2, [pc, #636]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b9d      	ldr	r3, [pc, #628]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a9c      	ldr	r2, [pc, #624]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff faf8 	bl	8000dbc <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff faf4 	bl	8000dbc <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e2ae      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e2:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2a8>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fae4 	bl	8000dbc <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fae0 	bl	8000dbc <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e29a      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2d0>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d060      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x310>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d119      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d116      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x328>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e277      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	4973      	ldr	r1, [pc, #460]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	e040      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186e:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fa9f 	bl	8000dbc <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fa9b 	bl	8000dbc <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e255      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	495f      	ldr	r1, [pc, #380]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e018      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fa7b 	bl	8000dbc <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa77 	bl	8000dbc <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e231      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fc:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001902:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fa56 	bl	8000dbc <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fa52 	bl	8000dbc <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e20c      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ef      	beq.n	8001914 <HAL_RCC_OscConfig+0x3ec>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff fa39 	bl	8000dbc <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff fa35 	bl	8000dbc <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1ef      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a6 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10d      	bne.n	80019a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	; 0x58
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d118      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7ff f9fc 	bl	8000dbc <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff f9f8 	bl	8000dbc <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1b2      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4d8>
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fe:	e029      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x50c>
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
 8001a34:	4b9a      	ldr	r3, [pc, #616]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a99      	ldr	r2, [pc, #612]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a44:	4b96      	ldr	r3, [pc, #600]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	4a95      	ldr	r2, [pc, #596]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d016      	beq.n	8001a8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f9ae 	bl	8000dbc <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff f9aa 	bl	8000dbc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e162      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	4b89      	ldr	r3, [pc, #548]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ed      	beq.n	8001a64 <HAL_RCC_OscConfig+0x53c>
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f997 	bl	8000dbc <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff f993 	bl	8000dbc <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e14b      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ed      	bne.n	8001a92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b78      	ldr	r3, [pc, #480]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001adc:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae2:	4a6f      	ldr	r2, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f966 	bl	8000dbc <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af4:	f7ff f962 	bl	8000dbc <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e11c      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b06:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ef      	beq.n	8001af4 <HAL_RCC_OscConfig+0x5cc>
 8001b14:	e01b      	b.n	8001b4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b1c:	4a60      	ldr	r2, [pc, #384]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff f949 	bl	8000dbc <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2e:	f7ff f945 	bl	8000dbc <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e0ff      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ef      	bne.n	8001b2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80f3 	beq.w	8001d3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	f040 80c9 	bne.w	8001cf4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b62:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d12c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	3b01      	subs	r3, #1
 8001b82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d123      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d11b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d113      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d109      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d06b      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d062      	beq.n	8001c9c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bd6:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0ac      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf2:	f7ff f8e3 	bl	8000dbc <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff f8df 	bl	8000dbc <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e099      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x77c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c28:	3a01      	subs	r2, #1
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	4311      	orrs	r1, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c32:	0212      	lsls	r2, r2, #8
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c3a:	0852      	lsrs	r2, r2, #1
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	0552      	lsls	r2, r2, #21
 8001c40:	4311      	orrs	r1, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c46:	0852      	lsrs	r2, r2, #1
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	0652      	lsls	r2, r2, #25
 8001c4c:	4311      	orrs	r1, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c52:	06d2      	lsls	r2, r2, #27
 8001c54:	430a      	orrs	r2, r1
 8001c56:	4912      	ldr	r1, [pc, #72]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c74:	f7ff f8a2 	bl	8000dbc <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff f89e 	bl	8000dbc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e058      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <HAL_RCC_OscConfig+0x778>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c9a:	e050      	b.n	8001d3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e04f      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d144      	bne.n	8001d3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ccc:	f7ff f876 	bl	8000dbc <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff f872 	bl	8000dbc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e02c      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x7ac>
 8001cf2:	e024      	b.n	8001d3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d01f      	beq.n	8001d3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff f859 	bl	8000dbc <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff f855 	bl	8000dbc <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e00f      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4905      	ldr	r1, [pc, #20]	; (8001d48 <HAL_RCC_OscConfig+0x820>)
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_RCC_OscConfig+0x824>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
 8001d38:	e001      	b.n	8001d3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	feeefffc 	.word	0xfeeefffc

08001d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0e7      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b75      	ldr	r3, [pc, #468]	; (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 0207 	bic.w	r2, r3, #7
 8001d7a:	4970      	ldr	r1, [pc, #448]	; (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b6e      	ldr	r3, [pc, #440]	; (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0cf      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d010      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4b66      	ldr	r3, [pc, #408]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d908      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b63      	ldr	r3, [pc, #396]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4960      	ldr	r1, [pc, #384]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d04c      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	4b5a      	ldr	r3, [pc, #360]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d121      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0a6      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	4b54      	ldr	r3, [pc, #336]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e09a      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e06:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e08e      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e086      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4943      	ldr	r1, [pc, #268]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e38:	f7fe ffc0 	bl	8000dbc <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7fe ffbc 	bl	8000dbc <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e06e      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d208      	bcs.n	8001e96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	492b      	ldr	r1, [pc, #172]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d210      	bcs.n	8001ec6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 0207 	bic.w	r2, r3, #7
 8001eac:	4923      	ldr	r1, [pc, #140]	; (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e036      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4918      	ldr	r1, [pc, #96]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4910      	ldr	r1, [pc, #64]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f04:	f000 f824 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	490b      	ldr	r1, [pc, #44]	; (8001f44 <HAL_RCC_ClockConfig+0x1f4>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1f8>)
 8001f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1fc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fef7 	bl	8000d1c <HAL_InitTick>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f32:	7afb      	ldrb	r3, [r7, #11]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08005824 	.word	0x08005824
 8001f48:	20000070 	.word	0x20000070
 8001f4c:	20000074 	.word	0x20000074

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d121      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d11e      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f84:	4b34      	ldr	r3, [pc, #208]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e005      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fac:	4a2b      	ldr	r2, [pc, #172]	; (800205c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e004      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d134      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d003      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0xac>
 8001ff4:	e005      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	e005      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ffe:	617b      	str	r3, [r7, #20]
      break;
 8002000:	e002      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	617b      	str	r3, [r7, #20]
      break;
 8002006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	3301      	adds	r3, #1
 8002014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	fb03 f202 	mul.w	r2, r3, r2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	0e5b      	lsrs	r3, r3, #25
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	3301      	adds	r3, #1
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002048:	69bb      	ldr	r3, [r7, #24]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	0800583c 	.word	0x0800583c
 8002060:	00f42400 	.word	0x00f42400
 8002064:	007a1200 	.word	0x007a1200

08002068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_RCC_GetHCLKFreq+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000070 	.word	0x20000070

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002084:	f7ff fff0 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4904      	ldr	r1, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08005834 	.word	0x08005834

080020ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b0:	f7ff ffda 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0adb      	lsrs	r3, r3, #11
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08005834 	.word	0x08005834

080020d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f0:	f7ff f9b6 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 80020f4:	6178      	str	r0, [r7, #20]
 80020f6:	e014      	b.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a24      	ldr	r2, [pc, #144]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002110:	f7ff f9a6 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 8002114:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002120:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002128:	d10b      	bne.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d919      	bls.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2ba0      	cmp	r3, #160	; 0xa0
 8002134:	d902      	bls.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002136:	2302      	movs	r3, #2
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e013      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800213c:	2301      	movs	r3, #1
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e010      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b80      	cmp	r3, #128	; 0x80
 8002146:	d902      	bls.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002148:	2303      	movs	r3, #3
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e00a      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d102      	bne.n	800215a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e004      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b70      	cmp	r3, #112	; 0x70
 800215e:	d101      	bne.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 0207 	bic.w	r2, r3, #7
 800216c:	4909      	ldr	r1, [pc, #36]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a0:	2300      	movs	r3, #0
 80021a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a4:	2300      	movs	r3, #0
 80021a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d031      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021bc:	d01a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021c2:	d814      	bhi.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021cc:	d10f      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021ce:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a5c      	ldr	r2, [pc, #368]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021da:	e00c      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3304      	adds	r3, #4
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fa22 	bl	800262c <RCCEx_PLLSAI1_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ec:	e003      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	74fb      	strb	r3, [r7, #19]
      break;
 80021f2:	e000      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021fc:	4b51      	ldr	r3, [pc, #324]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	494e      	ldr	r1, [pc, #312]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002212:	e001      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 809e 	beq.w	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800222a:	4b46      	ldr	r3, [pc, #280]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800223a:	2300      	movs	r3, #0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a3f      	ldr	r2, [pc, #252]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002258:	2301      	movs	r3, #1
 800225a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225c:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a39      	ldr	r2, [pc, #228]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002268:	f7fe fda8 	bl	8000dbc <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800226e:	e009      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002270:	f7fe fda4 	bl	8000dbc <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d902      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	74fb      	strb	r3, [r7, #19]
        break;
 8002282:	e005      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002284:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0ef      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d15a      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002296:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01e      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d019      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022de:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d016      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fd64 	bl	8000dbc <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f6:	e00b      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7fe fd60 	bl	8000dbc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d902      	bls.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	74fb      	strb	r3, [r7, #19]
            break;
 800230e:	e006      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0ec      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	4904      	ldr	r1, [pc, #16]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800233a:	e009      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
 8002340:	e006      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002350:	7c7b      	ldrb	r3, [r7, #17]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002356:	4b8d      	ldr	r3, [pc, #564]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	4a8c      	ldr	r2, [pc, #560]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800235c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002360:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800236e:	4b87      	ldr	r3, [pc, #540]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002374:	f023 0203 	bic.w	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4983      	ldr	r1, [pc, #524]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002390:	4b7e      	ldr	r3, [pc, #504]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f023 020c 	bic.w	r2, r3, #12
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	497b      	ldr	r1, [pc, #492]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	4972      	ldr	r1, [pc, #456]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023d4:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	496a      	ldr	r1, [pc, #424]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	4961      	ldr	r1, [pc, #388]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002418:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4959      	ldr	r1, [pc, #356]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800243a:	4b54      	ldr	r3, [pc, #336]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	4950      	ldr	r1, [pc, #320]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	4948      	ldr	r1, [pc, #288]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	493f      	ldr	r1, [pc, #252]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d028      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a0:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ae:	4937      	ldr	r1, [pc, #220]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024be:	d106      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c0:	4b32      	ldr	r3, [pc, #200]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4a31      	ldr	r2, [pc, #196]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ca:	60d3      	str	r3, [r2, #12]
 80024cc:	e011      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3304      	adds	r3, #4
 80024dc:	2101      	movs	r1, #1
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f8a4 	bl	800262c <RCCEx_PLLSAI1_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d028      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024fe:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002504:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250c:	491f      	ldr	r1, [pc, #124]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251c:	d106      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4a1a      	ldr	r2, [pc, #104]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002528:	60d3      	str	r3, [r2, #12]
 800252a:	e011      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002534:	d10c      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	2101      	movs	r1, #1
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f875 	bl	800262c <RCCEx_PLLSAI1_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d02b      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257a:	d109      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a02      	ldr	r2, [pc, #8]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002586:	60d3      	str	r3, [r2, #12]
 8002588:	e014      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	2101      	movs	r1, #1
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f843 	bl	800262c <RCCEx_PLLSAI1_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01c      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	4916      	ldr	r1, [pc, #88]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025de:	d10c      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	2102      	movs	r1, #2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f820 	bl	800262c <RCCEx_PLLSAI1_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4904      	ldr	r1, [pc, #16]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800261c:	7cbb      	ldrb	r3, [r7, #18]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000

0800262c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800263a:	4b74      	ldr	r3, [pc, #464]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d018      	beq.n	8002678 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002646:	4b71      	ldr	r3, [pc, #452]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0203 	and.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d10d      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
       ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800265e:	4b6b      	ldr	r3, [pc, #428]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
       ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d047      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e044      	b.n	8002702 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d018      	beq.n	80026b2 <RCCEx_PLLSAI1_Config+0x86>
 8002680:	2b03      	cmp	r3, #3
 8002682:	d825      	bhi.n	80026d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002684:	2b01      	cmp	r3, #1
 8002686:	d002      	beq.n	800268e <RCCEx_PLLSAI1_Config+0x62>
 8002688:	2b02      	cmp	r3, #2
 800268a:	d009      	beq.n	80026a0 <RCCEx_PLLSAI1_Config+0x74>
 800268c:	e020      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800268e:	4b5f      	ldr	r3, [pc, #380]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d11d      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269e:	e01a      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d116      	bne.n	80026da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b0:	e013      	b.n	80026da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026be:	4b53      	ldr	r3, [pc, #332]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ce:	e006      	b.n	80026de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      break;
 80026d4:	e004      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d6:	bf00      	nop
 80026d8:	e002      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026da:	bf00      	nop
 80026dc:	e000      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026de:	bf00      	nop
    }

    if(status == HAL_OK)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	430b      	orrs	r3, r1
 80026fc:	4943      	ldr	r1, [pc, #268]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d17c      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a3f      	ldr	r2, [pc, #252]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 800270e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002714:	f7fe fb52 	bl	8000dbc <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800271a:	e009      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800271c:	f7fe fb4e 	bl	8000dbc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	73fb      	strb	r3, [r7, #15]
        break;
 800272e:	e005      	b.n	800273c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ef      	bne.n	800271c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d15f      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d110      	bne.n	800276a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002748:	4b30      	ldr	r3, [pc, #192]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002750:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6892      	ldr	r2, [r2, #8]
 8002758:	0211      	lsls	r1, r2, #8
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	06d2      	lsls	r2, r2, #27
 8002760:	430a      	orrs	r2, r1
 8002762:	492a      	ldr	r1, [pc, #168]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002764:	4313      	orrs	r3, r2
 8002766:	610b      	str	r3, [r1, #16]
 8002768:	e027      	b.n	80027ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d112      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002778:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6892      	ldr	r2, [r2, #8]
 8002780:	0211      	lsls	r1, r2, #8
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6912      	ldr	r2, [r2, #16]
 8002786:	0852      	lsrs	r2, r2, #1
 8002788:	3a01      	subs	r2, #1
 800278a:	0552      	lsls	r2, r2, #21
 800278c:	430a      	orrs	r2, r1
 800278e:	491f      	ldr	r1, [pc, #124]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	610b      	str	r3, [r1, #16]
 8002794:	e011      	b.n	80027ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800279e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	0211      	lsls	r1, r2, #8
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6952      	ldr	r2, [r2, #20]
 80027ac:	0852      	lsrs	r2, r2, #1
 80027ae:	3a01      	subs	r2, #1
 80027b0:	0652      	lsls	r2, r2, #25
 80027b2:	430a      	orrs	r2, r1
 80027b4:	4915      	ldr	r1, [pc, #84]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe faf9 	bl	8000dbc <HAL_GetTick>
 80027ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027cc:	e009      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ce:	f7fe faf5 	bl	8000dbc <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d902      	bls.n	80027e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	73fb      	strb	r3, [r7, #15]
          break;
 80027e0:	e005      	b.n	80027ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ef      	beq.n	80027ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4903      	ldr	r1, [pc, #12]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000

08002810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e095      	b.n	800294e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	2b00      	cmp	r3, #0
 8002828:	d108      	bne.n	800283c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002832:	d009      	beq.n	8002848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
 800283a:	e005      	b.n	8002848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe f86a 	bl	800093c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800287e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002888:	d902      	bls.n	8002890 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e002      	b.n	8002896 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800289e:	d007      	beq.n	80028b0 <HAL_SPI_Init+0xa0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028a8:	d002      	beq.n	80028b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	ea42 0103 	orr.w	r1, r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	0c1b      	lsrs	r3, r3, #16
 800290c:	f003 0204 	and.w	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800292c:	ea42 0103 	orr.w	r1, r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b088      	sub	sp, #32
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_SPI_Transmit+0x22>
 8002974:	2302      	movs	r3, #2
 8002976:	e158      	b.n	8002c2a <HAL_SPI_Transmit+0x2d4>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002980:	f7fe fa1c 	bl	8000dbc <HAL_GetTick>
 8002984:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d002      	beq.n	800299c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002996:	2302      	movs	r3, #2
 8002998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800299a:	e13d      	b.n	8002c18 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_SPI_Transmit+0x52>
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ac:	e134      	b.n	8002c18 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f8:	d10f      	bne.n	8002a1a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d007      	beq.n	8002a38 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a40:	d94b      	bls.n	8002ada <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_SPI_Transmit+0xfa>
 8002a4a:	8afb      	ldrh	r3, [r7, #22]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d13e      	bne.n	8002ace <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a74:	e02b      	b.n	8002ace <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d112      	bne.n	8002aaa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	1c9a      	adds	r2, r3, #2
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aa8:	e011      	b.n	8002ace <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aaa:	f7fe f987 	bl	8000dbc <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d803      	bhi.n	8002ac2 <HAL_SPI_Transmit+0x16c>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d102      	bne.n	8002ac8 <HAL_SPI_Transmit+0x172>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002acc:	e0a4      	b.n	8002c18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ce      	bne.n	8002a76 <HAL_SPI_Transmit+0x120>
 8002ad8:	e07c      	b.n	8002bd4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_SPI_Transmit+0x192>
 8002ae2:	8afb      	ldrh	r3, [r7, #22]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d170      	bne.n	8002bca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d912      	bls.n	8002b18 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	1c9a      	adds	r2, r3, #2
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b02      	subs	r3, #2
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b16:	e058      	b.n	8002bca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002b3e:	e044      	b.n	8002bca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d12b      	bne.n	8002ba6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d912      	bls.n	8002b7e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	1c9a      	adds	r2, r3, #2
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b02      	subs	r3, #2
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b7c:	e025      	b.n	8002bca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ba4:	e011      	b.n	8002bca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba6:	f7fe f909 	bl	8000dbc <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d803      	bhi.n	8002bbe <HAL_SPI_Transmit+0x268>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d102      	bne.n	8002bc4 <HAL_SPI_Transmit+0x26e>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bc8:	e026      	b.n	8002c18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1b5      	bne.n	8002b40 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fce3 	bl	80035a4 <SPI_EndRxTxTransaction>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e000      	b.n	8002c18 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002c16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b088      	sub	sp, #32
 8002c36:	af02      	add	r7, sp, #8
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c4e:	d112      	bne.n	8002c76 <HAL_SPI_Receive+0x44>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10e      	bne.n	8002c76 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f910 	bl	8002e92 <HAL_SPI_TransmitReceive>
 8002c72:	4603      	mov	r3, r0
 8002c74:	e109      	b.n	8002e8a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_SPI_Receive+0x52>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e102      	b.n	8002e8a <HAL_SPI_Receive+0x258>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c8c:	f7fe f896 	bl	8000dbc <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d002      	beq.n	8002ca4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ca2:	e0e9      	b.n	8002e78 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_SPI_Receive+0x7e>
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cb4:	e0e0      	b.n	8002e78 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	88fa      	ldrh	r2, [r7, #6]
 8002cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	88fa      	ldrh	r2, [r7, #6]
 8002cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d00:	d908      	bls.n	8002d14 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	e007      	b.n	8002d24 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d22:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2c:	d10f      	bne.n	8002d4e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d007      	beq.n	8002d6c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d74:	d867      	bhi.n	8002e46 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d76:	e030      	b.n	8002dda <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d117      	bne.n	8002db6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f103 020c 	add.w	r2, r3, #12
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002db4:	e011      	b.n	8002dda <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002db6:	f7fe f801 	bl	8000dbc <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d803      	bhi.n	8002dce <HAL_SPI_Receive+0x19c>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d102      	bne.n	8002dd4 <HAL_SPI_Receive+0x1a2>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002dd8:	e04e      	b.n	8002e78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1c8      	bne.n	8002d78 <HAL_SPI_Receive+0x146>
 8002de6:	e034      	b.n	8002e52 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d115      	bne.n	8002e22 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	b292      	uxth	r2, r2
 8002e02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e20:	e011      	b.n	8002e46 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e22:	f7fd ffcb 	bl	8000dbc <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d803      	bhi.n	8002e3a <HAL_SPI_Receive+0x208>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d102      	bne.n	8002e40 <HAL_SPI_Receive+0x20e>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e44:	e018      	b.n	8002e78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ca      	bne.n	8002de8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fb4c 	bl	80034f4 <SPI_EndRxTransaction>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	75fb      	strb	r3, [r7, #23]
 8002e74:	e000      	b.n	8002e78 <HAL_SPI_Receive+0x246>
  }

error :
 8002e76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b08a      	sub	sp, #40	; 0x28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x26>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e1fb      	b.n	80032b0 <HAL_SPI_TransmitReceive+0x41e>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec0:	f7fd ff7c 	bl	8000dbc <HAL_GetTick>
 8002ec4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ecc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002edc:	7efb      	ldrb	r3, [r7, #27]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d00e      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x6e>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee8:	d106      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x66>
 8002ef2:	7efb      	ldrb	r3, [r7, #27]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d003      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002efe:	e1cd      	b.n	800329c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x80>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x80>
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d103      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f18:	e1c0      	b.n	800329c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d003      	beq.n	8002f2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2205      	movs	r2, #5
 8002f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	887a      	ldrh	r2, [r7, #2]
 8002f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	887a      	ldrh	r2, [r7, #2]
 8002f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	887a      	ldrh	r2, [r7, #2]
 8002f5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f70:	d802      	bhi.n	8002f78 <HAL_SPI_TransmitReceive+0xe6>
 8002f72:	8a3b      	ldrh	r3, [r7, #16]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d908      	bls.n	8002f8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	e007      	b.n	8002f9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d007      	beq.n	8002fb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc0:	d97c      	bls.n	80030bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x13e>
 8002fca:	8a7b      	ldrh	r3, [r7, #18]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d169      	bne.n	80030a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	1c9a      	adds	r2, r3, #2
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff4:	e056      	b.n	80030a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d11b      	bne.n	800303c <HAL_SPI_TransmitReceive+0x1aa>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_SPI_TransmitReceive+0x1aa>
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	2b01      	cmp	r3, #1
 8003012:	d113      	bne.n	800303c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	881a      	ldrh	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d11c      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x1f2>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	b292      	uxth	r2, r2
 8003062:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	1c9a      	adds	r2, r3, #2
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003080:	2301      	movs	r3, #1
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003084:	f7fd fe9a 	bl	8000dbc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003090:	429a      	cmp	r2, r3
 8003092:	d807      	bhi.n	80030a4 <HAL_SPI_TransmitReceive+0x212>
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309a:	d003      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80030a2:	e0fb      	b.n	800329c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1a3      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x164>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d19d      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x164>
 80030ba:	e0df      	b.n	800327c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x23a>
 80030c4:	8a7b      	ldrh	r3, [r7, #18]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 80cb 	bne.w	8003262 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d912      	bls.n	80030fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	881a      	ldrh	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b02      	subs	r3, #2
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030fa:	e0b2      	b.n	8003262 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003122:	e09e      	b.n	8003262 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d134      	bne.n	800319c <HAL_SPI_TransmitReceive+0x30a>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02f      	beq.n	800319c <HAL_SPI_TransmitReceive+0x30a>
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	2b01      	cmp	r3, #1
 8003140:	d12c      	bne.n	800319c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d912      	bls.n	8003172 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	881a      	ldrh	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	1c9a      	adds	r2, r3, #2
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b02      	subs	r3, #2
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003170:	e012      	b.n	8003198 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d148      	bne.n	800323c <HAL_SPI_TransmitReceive+0x3aa>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d042      	beq.n	800323c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d923      	bls.n	800320a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	b292      	uxth	r2, r2
 80031ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	1c9a      	adds	r2, r3, #2
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b02      	subs	r3, #2
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d81f      	bhi.n	8003238 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	e016      	b.n	8003238 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f103 020c 	add.w	r2, r3, #12
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	7812      	ldrb	r2, [r2, #0]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003238:	2301      	movs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800323c:	f7fd fdbe 	bl	8000dbc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003248:	429a      	cmp	r2, r3
 800324a:	d803      	bhi.n	8003254 <HAL_SPI_TransmitReceive+0x3c2>
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d102      	bne.n	800325a <HAL_SPI_TransmitReceive+0x3c8>
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003260:	e01c      	b.n	800329c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	f47f af5b 	bne.w	8003124 <HAL_SPI_TransmitReceive+0x292>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f af54 	bne.w	8003124 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f98f 	bl	80035a4 <SPI_EndRxTxTransaction>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d006      	beq.n	800329a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	661a      	str	r2, [r3, #96]	; 0x60
 8003298:	e000      	b.n	800329c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800329a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c8:	f7fd fd78 	bl	8000dbc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d8:	f7fd fd70 	bl	8000dbc <HAL_GetTick>
 80032dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	015b      	lsls	r3, r3, #5
 80032e4:	0d1b      	lsrs	r3, r3, #20
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ee:	e054      	b.n	800339a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d050      	beq.n	800339a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f8:	f7fd fd60 	bl	8000dbc <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	429a      	cmp	r2, r3
 8003306:	d902      	bls.n	800330e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d13d      	bne.n	800338a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800331c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003326:	d111      	bne.n	800334c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	d004      	beq.n	800333c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333a:	d107      	bne.n	800334c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003354:	d10f      	bne.n	8003376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e017      	b.n	80033ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3b01      	subs	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d19b      	bne.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3720      	adds	r7, #32
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000070 	.word	0x20000070

080033c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033da:	f7fd fcef 	bl	8000dbc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033ea:	f7fd fce7 	bl	8000dbc <HAL_GetTick>
 80033ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033f8:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00da      	lsls	r2, r3, #3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	0d1b      	lsrs	r3, r3, #20
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003410:	e060      	b.n	80034d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003418:	d107      	bne.n	800342a <SPI_WaitFifoStateUntilTimeout+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003428:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d050      	beq.n	80034d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003432:	f7fd fcc3 	bl	8000dbc <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343e:	429a      	cmp	r2, r3
 8003440:	d902      	bls.n	8003448 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d13d      	bne.n	80034c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003460:	d111      	bne.n	8003486 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d004      	beq.n	8003476 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003474:	d107      	bne.n	8003486 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003484:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348e:	d10f      	bne.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e010      	b.n	80034e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d196      	bne.n	8003412 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000070 	.word	0x20000070

080034f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003508:	d111      	bne.n	800352e <SPI_EndRxTransaction+0x3a>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003512:	d004      	beq.n	800351e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351c:	d107      	bne.n	800352e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff febd 	bl	80032b8 <SPI_WaitFlagStateUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e023      	b.n	800359c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355c:	d11d      	bne.n	800359a <SPI_EndRxTransaction+0xa6>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003566:	d004      	beq.n	8003572 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003570:	d113      	bne.n	800359a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2200      	movs	r2, #0
 800357a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f7ff ff22 	bl	80033c8 <SPI_WaitFifoStateUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e000      	b.n	800359c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff ff03 	bl	80033c8 <SPI_WaitFifoStateUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e027      	b.n	8003628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff fe68 	bl	80032b8 <SPI_WaitFlagStateUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e014      	b.n	8003628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2200      	movs	r2, #0
 8003606:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff fedc 	bl	80033c8 <SPI_WaitFifoStateUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	f043 0220 	orr.w	r2, r3, #32
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e000      	b.n	8003628 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e040      	b.n	80036c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd f9d4 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fbc2 	bl	8003df8 <UART_SetConfig>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e022      	b.n	80036c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fe10 	bl	80042ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800369a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fe97 	bl	80043f0 <UART_CheckIdleState>
 80036c2:	4603      	mov	r3, r0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	f040 8082 	bne.w	80037ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_UART_Transmit+0x26>
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07a      	b.n	80037ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Transmit+0x38>
 8003700:	2302      	movs	r3, #2
 8003702:	e073      	b.n	80037ec <HAL_UART_Transmit+0x120>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2221      	movs	r2, #33	; 0x21
 8003718:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371a:	f7fd fb4f 	bl	8000dbc <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	88fa      	ldrh	r2, [r7, #6]
 800372c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	d108      	bne.n	800374c <HAL_UART_Transmit+0x80>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e003      	b.n	8003754 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800375c:	e02d      	b.n	80037ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	2180      	movs	r1, #128	; 0x80
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fe8a 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e039      	b.n	80037ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	881a      	ldrh	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800378a:	b292      	uxth	r2, r2
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	3302      	adds	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e008      	b.n	80037a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	b292      	uxth	r2, r2
 80037a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3301      	adds	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1cb      	bne.n	800375e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2140      	movs	r1, #64	; 0x40
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fe56 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e005      	b.n	80037ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b0ba      	sub	sp, #232	; 0xe8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800381a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800381e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003822:	4013      	ands	r3, r2
 8003824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d115      	bne.n	800385c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00f      	beq.n	800385c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 82a6 	beq.w	8003d9e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
      }
      return;
 800385a:	e2a0      	b.n	8003d9e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800385c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8117 	beq.w	8003a94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003872:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003876:	4b85      	ldr	r3, [pc, #532]	; (8003a8c <HAL_UART_IRQHandler+0x298>)
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 810a 	beq.w	8003a94 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d011      	beq.n	80038b0 <HAL_UART_IRQHandler+0xbc>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d011      	beq.n	80038e0 <HAL_UART_IRQHandler+0xec>
 80038bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2202      	movs	r2, #2
 80038ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d6:	f043 0204 	orr.w	r2, r3, #4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d011      	beq.n	8003910 <HAL_UART_IRQHandler+0x11c>
 80038ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2204      	movs	r2, #4
 80038fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d017      	beq.n	800394c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800391c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2208      	movs	r2, #8
 800393a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003942:	f043 0208 	orr.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003954:	2b00      	cmp	r3, #0
 8003956:	d012      	beq.n	800397e <HAL_UART_IRQHandler+0x18a>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00c      	beq.n	800397e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800396c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003974:	f043 0220 	orr.w	r2, r3, #32
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 820c 	beq.w	8003da2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d005      	beq.n	80039d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d04f      	beq.n	8003a76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fe17 	bl	800460a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d141      	bne.n	8003a6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3308      	adds	r3, #8
 80039f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1d9      	bne.n	80039ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d013      	beq.n	8003a66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <HAL_UART_IRQHandler+0x29c>)
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fb35 	bl	80010ba <HAL_DMA_Abort_IT>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d017      	beq.n	8003a86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a60:	4610      	mov	r0, r2
 8003a62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e00f      	b.n	8003a86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f9b0 	bl	8003dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	e00b      	b.n	8003a86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f9ac 	bl	8003dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	e007      	b.n	8003a86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f9a8 	bl	8003dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a84:	e18d      	b.n	8003da2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a86:	bf00      	nop
    return;
 8003a88:	e18b      	b.n	8003da2 <HAL_UART_IRQHandler+0x5ae>
 8003a8a:	bf00      	nop
 8003a8c:	04000120 	.word	0x04000120
 8003a90:	080046d1 	.word	0x080046d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f040 8146 	bne.w	8003d2a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 813f 	beq.w	8003d2a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8138 	beq.w	8003d2a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	f040 80b4 	bne.w	8003c3a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ade:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 815f 	beq.w	8003da6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003af2:	429a      	cmp	r2, r3
 8003af4:	f080 8157 	bcs.w	8003da6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003afe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 8085 	bne.w	8003c1e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1da      	bne.n	8003b14 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e1      	bne.n	8003b5e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e3      	bne.n	8003b9a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bee:	f023 0310 	bic.w	r3, r3, #16
 8003bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e4      	bne.n	8003bde <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd fa10 	bl	800103e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8d4 	bl	8003de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c38:	e0b5      	b.n	8003da6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80a7 	beq.w	8003daa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a2 	beq.w	8003daa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c88:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e4      	bne.n	8003c66 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	623b      	str	r3, [r7, #32]
   return(result);
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cc0:	633a      	str	r2, [r7, #48]	; 0x30
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e3      	bne.n	8003c9c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0310 	bic.w	r3, r3, #16
 8003cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	617b      	str	r3, [r7, #20]
   return(result);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e4      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f85c 	bl	8003de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d28:	e03f      	b.n	8003daa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00e      	beq.n	8003d54 <HAL_UART_IRQHandler+0x560>
 8003d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fcff 	bl	8004750 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d52:	e02d      	b.n	8003db0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01c      	beq.n	8003dae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
    }
    return;
 8003d7c:	e017      	b.n	8003dae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d012      	beq.n	8003db0 <HAL_UART_IRQHandler+0x5bc>
 8003d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fcb0 	bl	80046fc <UART_EndTransmit_IT>
    return;
 8003d9c:	e008      	b.n	8003db0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003d9e:	bf00      	nop
 8003da0:	e006      	b.n	8003db0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003dae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003db0:	37e8      	adds	r7, #232	; 0xe8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop

08003db8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b08a      	sub	sp, #40	; 0x28
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b9e      	ldr	r3, [pc, #632]	; (80040a0 <UART_SetConfig+0x2a8>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a93      	ldr	r2, [pc, #588]	; (80040a4 <UART_SetConfig+0x2ac>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d004      	beq.n	8003e64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	4313      	orrs	r3, r2
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a8a      	ldr	r2, [pc, #552]	; (80040a8 <UART_SetConfig+0x2b0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d126      	bne.n	8003ed0 <UART_SetConfig+0xd8>
 8003e82:	4b8a      	ldr	r3, [pc, #552]	; (80040ac <UART_SetConfig+0x2b4>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d81b      	bhi.n	8003ec8 <UART_SetConfig+0xd0>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0xa0>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003eb9 	.word	0x08003eb9
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ec1 	.word	0x08003ec1
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e0ab      	b.n	8004008 <UART_SetConfig+0x210>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb6:	e0a7      	b.n	8004008 <UART_SetConfig+0x210>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	e0a3      	b.n	8004008 <UART_SetConfig+0x210>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec6:	e09f      	b.n	8004008 <UART_SetConfig+0x210>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	e09b      	b.n	8004008 <UART_SetConfig+0x210>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a76      	ldr	r2, [pc, #472]	; (80040b0 <UART_SetConfig+0x2b8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d138      	bne.n	8003f4c <UART_SetConfig+0x154>
 8003eda:	4b74      	ldr	r3, [pc, #464]	; (80040ac <UART_SetConfig+0x2b4>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b0c      	cmp	r3, #12
 8003ee6:	d82d      	bhi.n	8003f44 <UART_SetConfig+0x14c>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0xf8>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08003f45 	.word	0x08003f45
 8003ef8:	08003f45 	.word	0x08003f45
 8003efc:	08003f45 	.word	0x08003f45
 8003f00:	08003f35 	.word	0x08003f35
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f45 	.word	0x08003f45
 8003f0c:	08003f45 	.word	0x08003f45
 8003f10:	08003f2d 	.word	0x08003f2d
 8003f14:	08003f45 	.word	0x08003f45
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	08003f3d 	.word	0x08003f3d
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e06d      	b.n	8004008 <UART_SetConfig+0x210>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e069      	b.n	8004008 <UART_SetConfig+0x210>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e065      	b.n	8004008 <UART_SetConfig+0x210>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f42:	e061      	b.n	8004008 <UART_SetConfig+0x210>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e05d      	b.n	8004008 <UART_SetConfig+0x210>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a58      	ldr	r2, [pc, #352]	; (80040b4 <UART_SetConfig+0x2bc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d125      	bne.n	8003fa2 <UART_SetConfig+0x1aa>
 8003f56:	4b55      	ldr	r3, [pc, #340]	; (80040ac <UART_SetConfig+0x2b4>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f60:	2b30      	cmp	r3, #48	; 0x30
 8003f62:	d016      	beq.n	8003f92 <UART_SetConfig+0x19a>
 8003f64:	2b30      	cmp	r3, #48	; 0x30
 8003f66:	d818      	bhi.n	8003f9a <UART_SetConfig+0x1a2>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d00a      	beq.n	8003f82 <UART_SetConfig+0x18a>
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d814      	bhi.n	8003f9a <UART_SetConfig+0x1a2>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <UART_SetConfig+0x182>
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d008      	beq.n	8003f8a <UART_SetConfig+0x192>
 8003f78:	e00f      	b.n	8003f9a <UART_SetConfig+0x1a2>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f80:	e042      	b.n	8004008 <UART_SetConfig+0x210>
 8003f82:	2302      	movs	r3, #2
 8003f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f88:	e03e      	b.n	8004008 <UART_SetConfig+0x210>
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f90:	e03a      	b.n	8004008 <UART_SetConfig+0x210>
 8003f92:	2308      	movs	r3, #8
 8003f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f98:	e036      	b.n	8004008 <UART_SetConfig+0x210>
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa0:	e032      	b.n	8004008 <UART_SetConfig+0x210>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a3f      	ldr	r2, [pc, #252]	; (80040a4 <UART_SetConfig+0x2ac>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d12a      	bne.n	8004002 <UART_SetConfig+0x20a>
 8003fac:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <UART_SetConfig+0x2b4>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fba:	d01a      	beq.n	8003ff2 <UART_SetConfig+0x1fa>
 8003fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc0:	d81b      	bhi.n	8003ffa <UART_SetConfig+0x202>
 8003fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc6:	d00c      	beq.n	8003fe2 <UART_SetConfig+0x1ea>
 8003fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fcc:	d815      	bhi.n	8003ffa <UART_SetConfig+0x202>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <UART_SetConfig+0x1e2>
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	d008      	beq.n	8003fea <UART_SetConfig+0x1f2>
 8003fd8:	e00f      	b.n	8003ffa <UART_SetConfig+0x202>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe0:	e012      	b.n	8004008 <UART_SetConfig+0x210>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe8:	e00e      	b.n	8004008 <UART_SetConfig+0x210>
 8003fea:	2304      	movs	r3, #4
 8003fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff0:	e00a      	b.n	8004008 <UART_SetConfig+0x210>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff8:	e006      	b.n	8004008 <UART_SetConfig+0x210>
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004000:	e002      	b.n	8004008 <UART_SetConfig+0x210>
 8004002:	2310      	movs	r3, #16
 8004004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <UART_SetConfig+0x2ac>)
 800400e:	4293      	cmp	r3, r2
 8004010:	f040 808a 	bne.w	8004128 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004018:	2b08      	cmp	r3, #8
 800401a:	d824      	bhi.n	8004066 <UART_SetConfig+0x26e>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0x22c>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004049 	.word	0x08004049
 8004028:	08004067 	.word	0x08004067
 800402c:	08004051 	.word	0x08004051
 8004030:	08004067 	.word	0x08004067
 8004034:	08004057 	.word	0x08004057
 8004038:	08004067 	.word	0x08004067
 800403c:	08004067 	.word	0x08004067
 8004040:	08004067 	.word	0x08004067
 8004044:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fe f81a 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 800404c:	61f8      	str	r0, [r7, #28]
        break;
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <UART_SetConfig+0x2c0>)
 8004052:	61fb      	str	r3, [r7, #28]
        break;
 8004054:	e00d      	b.n	8004072 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fd ff7b 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800405a:	61f8      	str	r0, [r7, #28]
        break;
 800405c:	e009      	b.n	8004072 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	61fb      	str	r3, [r7, #28]
        break;
 8004064:	e005      	b.n	8004072 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8109 	beq.w	800428c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	429a      	cmp	r2, r3
 8004088:	d305      	bcc.n	8004096 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	429a      	cmp	r2, r3
 8004094:	d912      	bls.n	80040bc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800409c:	e0f6      	b.n	800428c <UART_SetConfig+0x494>
 800409e:	bf00      	nop
 80040a0:	efff69f3 	.word	0xefff69f3
 80040a4:	40008000 	.word	0x40008000
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40004400 	.word	0x40004400
 80040b4:	40004800 	.word	0x40004800
 80040b8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2200      	movs	r2, #0
 80040c0:	461c      	mov	r4, r3
 80040c2:	4615      	mov	r5, r2
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	022b      	lsls	r3, r5, #8
 80040ce:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040d2:	0222      	lsls	r2, r4, #8
 80040d4:	68f9      	ldr	r1, [r7, #12]
 80040d6:	6849      	ldr	r1, [r1, #4]
 80040d8:	0849      	lsrs	r1, r1, #1
 80040da:	2000      	movs	r0, #0
 80040dc:	4688      	mov	r8, r1
 80040de:	4681      	mov	r9, r0
 80040e0:	eb12 0a08 	adds.w	sl, r2, r8
 80040e4:	eb43 0b09 	adc.w	fp, r3, r9
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f6:	4650      	mov	r0, sl
 80040f8:	4659      	mov	r1, fp
 80040fa:	f7fc f8b9 	bl	8000270 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4613      	mov	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410c:	d308      	bcc.n	8004120 <UART_SetConfig+0x328>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004114:	d204      	bcs.n	8004120 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	e0b5      	b.n	800428c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004126:	e0b1      	b.n	800428c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004130:	d15d      	bne.n	80041ee <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004136:	2b08      	cmp	r3, #8
 8004138:	d827      	bhi.n	800418a <UART_SetConfig+0x392>
 800413a:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <UART_SetConfig+0x348>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004165 	.word	0x08004165
 8004144:	0800416d 	.word	0x0800416d
 8004148:	08004175 	.word	0x08004175
 800414c:	0800418b 	.word	0x0800418b
 8004150:	0800417b 	.word	0x0800417b
 8004154:	0800418b 	.word	0x0800418b
 8004158:	0800418b 	.word	0x0800418b
 800415c:	0800418b 	.word	0x0800418b
 8004160:	08004183 	.word	0x08004183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004164:	f7fd ff8c 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8004168:	61f8      	str	r0, [r7, #28]
        break;
 800416a:	e014      	b.n	8004196 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800416c:	f7fd ff9e 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e010      	b.n	8004196 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <UART_SetConfig+0x4b0>)
 8004176:	61fb      	str	r3, [r7, #28]
        break;
 8004178:	e00d      	b.n	8004196 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7fd fee9 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800417e:	61f8      	str	r0, [r7, #28]
        break;
 8004180:	e009      	b.n	8004196 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	61fb      	str	r3, [r7, #28]
        break;
 8004188:	e005      	b.n	8004196 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d077      	beq.n	800428c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005a      	lsls	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b0f      	cmp	r3, #15
 80041b6:	d916      	bls.n	80041e6 <UART_SetConfig+0x3ee>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041be:	d212      	bcs.n	80041e6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f023 030f 	bic.w	r3, r3, #15
 80041c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	8afb      	ldrh	r3, [r7, #22]
 80041d8:	4313      	orrs	r3, r2
 80041da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	8afa      	ldrh	r2, [r7, #22]
 80041e2:	60da      	str	r2, [r3, #12]
 80041e4:	e052      	b.n	800428c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041ec:	e04e      	b.n	800428c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d827      	bhi.n	8004246 <UART_SetConfig+0x44e>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0x404>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004229 	.word	0x08004229
 8004204:	08004231 	.word	0x08004231
 8004208:	08004247 	.word	0x08004247
 800420c:	08004237 	.word	0x08004237
 8004210:	08004247 	.word	0x08004247
 8004214:	08004247 	.word	0x08004247
 8004218:	08004247 	.word	0x08004247
 800421c:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7fd ff2e 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
 8004224:	61f8      	str	r0, [r7, #28]
        break;
 8004226:	e014      	b.n	8004252 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7fd ff40 	bl	80020ac <HAL_RCC_GetPCLK2Freq>
 800422c:	61f8      	str	r0, [r7, #28]
        break;
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <UART_SetConfig+0x4b0>)
 8004232:	61fb      	str	r3, [r7, #28]
        break;
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7fd fe8b 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800423a:	61f8      	str	r0, [r7, #28]
        break;
 800423c:	e009      	b.n	8004252 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004242:	61fb      	str	r3, [r7, #28]
        break;
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004250:	bf00      	nop
    }

    if (pclk != 0U)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d019      	beq.n	800428c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	085a      	lsrs	r2, r3, #1
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	441a      	add	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d909      	bls.n	8004286 <UART_SetConfig+0x48e>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004278:	d205      	bcs.n	8004286 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e002      	b.n	800428c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004298:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800429c:	4618      	mov	r0, r3
 800429e:	3728      	adds	r7, #40	; 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	00f42400 	.word	0x00f42400

080042ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043aa:	d10a      	bne.n	80043c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004400:	f7fc fcdc 	bl	8000dbc <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d10e      	bne.n	8004432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f82d 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e023      	b.n	800447a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b04      	cmp	r3, #4
 800443e:	d10e      	bne.n	800445e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f817 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e00d      	b.n	800447a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b09c      	sub	sp, #112	; 0x70
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004492:	e0a5      	b.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449a:	f000 80a1 	beq.w	80045e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fc fc8d 	bl	8000dbc <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80044ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d13e      	bne.n	8004532 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044c8:	667b      	str	r3, [r7, #100]	; 0x64
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e6      	bne.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3308      	adds	r3, #8
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	663b      	str	r3, [r7, #96]	; 0x60
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3308      	adds	r3, #8
 8004504:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004506:	64ba      	str	r2, [r7, #72]	; 0x48
 8004508:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800450c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e5      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e067      	b.n	8004602 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d04f      	beq.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454e:	d147      	bne.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004558:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800456e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
 800457a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800457e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e6      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3308      	adds	r3, #8
 8004592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	613b      	str	r3, [r7, #16]
   return(result);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3308      	adds	r3, #8
 80045aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045ac:	623a      	str	r2, [r7, #32]
 80045ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	69f9      	ldr	r1, [r7, #28]
 80045b2:	6a3a      	ldr	r2, [r7, #32]
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e5      	bne.n	800458c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e010      	b.n	8004602 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69da      	ldr	r2, [r3, #28]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	f43f af4a 	beq.w	8004494 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3770      	adds	r7, #112	; 0x70
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800460a:	b480      	push	{r7}
 800460c:	b095      	sub	sp, #84	; 0x54
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004630:	643b      	str	r3, [r7, #64]	; 0x40
 8004632:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e6      	bne.n	8004612 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3308      	adds	r3, #8
 800464a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	61fb      	str	r3, [r7, #28]
   return(result);
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3308      	adds	r3, #8
 8004662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004664:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800466a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e5      	bne.n	8004644 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467c:	2b01      	cmp	r3, #1
 800467e:	d118      	bne.n	80046b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	60bb      	str	r3, [r7, #8]
   return(result);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	613b      	str	r3, [r7, #16]
   return(result);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e6      	bne.n	8004680 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046c4:	bf00      	nop
 80046c6:	3754      	adds	r7, #84	; 0x54
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff fb6c 	bl	8003dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60bb      	str	r3, [r7, #8]
   return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e6      	bne.n	8004704 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fb38 	bl	8003db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004748:	bf00      	nop
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <__errno>:
 8004764:	4b01      	ldr	r3, [pc, #4]	; (800476c <__errno+0x8>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	2000007c 	.word	0x2000007c

08004770 <__libc_init_array>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	4d0d      	ldr	r5, [pc, #52]	; (80047a8 <__libc_init_array+0x38>)
 8004774:	4c0d      	ldr	r4, [pc, #52]	; (80047ac <__libc_init_array+0x3c>)
 8004776:	1b64      	subs	r4, r4, r5
 8004778:	10a4      	asrs	r4, r4, #2
 800477a:	2600      	movs	r6, #0
 800477c:	42a6      	cmp	r6, r4
 800477e:	d109      	bne.n	8004794 <__libc_init_array+0x24>
 8004780:	4d0b      	ldr	r5, [pc, #44]	; (80047b0 <__libc_init_array+0x40>)
 8004782:	4c0c      	ldr	r4, [pc, #48]	; (80047b4 <__libc_init_array+0x44>)
 8004784:	f001 f824 	bl	80057d0 <_init>
 8004788:	1b64      	subs	r4, r4, r5
 800478a:	10a4      	asrs	r4, r4, #2
 800478c:	2600      	movs	r6, #0
 800478e:	42a6      	cmp	r6, r4
 8004790:	d105      	bne.n	800479e <__libc_init_array+0x2e>
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	f855 3b04 	ldr.w	r3, [r5], #4
 8004798:	4798      	blx	r3
 800479a:	3601      	adds	r6, #1
 800479c:	e7ee      	b.n	800477c <__libc_init_array+0xc>
 800479e:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a2:	4798      	blx	r3
 80047a4:	3601      	adds	r6, #1
 80047a6:	e7f2      	b.n	800478e <__libc_init_array+0x1e>
 80047a8:	0800590c 	.word	0x0800590c
 80047ac:	0800590c 	.word	0x0800590c
 80047b0:	0800590c 	.word	0x0800590c
 80047b4:	08005910 	.word	0x08005910

080047b8 <memset>:
 80047b8:	4402      	add	r2, r0
 80047ba:	4603      	mov	r3, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	f803 1b01 	strb.w	r1, [r3], #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <iprintf>:
 80047c8:	b40f      	push	{r0, r1, r2, r3}
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <iprintf+0x2c>)
 80047cc:	b513      	push	{r0, r1, r4, lr}
 80047ce:	681c      	ldr	r4, [r3, #0]
 80047d0:	b124      	cbz	r4, 80047dc <iprintf+0x14>
 80047d2:	69a3      	ldr	r3, [r4, #24]
 80047d4:	b913      	cbnz	r3, 80047dc <iprintf+0x14>
 80047d6:	4620      	mov	r0, r4
 80047d8:	f000 fa5e 	bl	8004c98 <__sinit>
 80047dc:	ab05      	add	r3, sp, #20
 80047de:	9a04      	ldr	r2, [sp, #16]
 80047e0:	68a1      	ldr	r1, [r4, #8]
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	4620      	mov	r0, r4
 80047e6:	f000 fc67 	bl	80050b8 <_vfiprintf_r>
 80047ea:	b002      	add	sp, #8
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f0:	b004      	add	sp, #16
 80047f2:	4770      	bx	lr
 80047f4:	2000007c 	.word	0x2000007c

080047f8 <_puts_r>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	460e      	mov	r6, r1
 80047fc:	4605      	mov	r5, r0
 80047fe:	b118      	cbz	r0, 8004808 <_puts_r+0x10>
 8004800:	6983      	ldr	r3, [r0, #24]
 8004802:	b90b      	cbnz	r3, 8004808 <_puts_r+0x10>
 8004804:	f000 fa48 	bl	8004c98 <__sinit>
 8004808:	69ab      	ldr	r3, [r5, #24]
 800480a:	68ac      	ldr	r4, [r5, #8]
 800480c:	b913      	cbnz	r3, 8004814 <_puts_r+0x1c>
 800480e:	4628      	mov	r0, r5
 8004810:	f000 fa42 	bl	8004c98 <__sinit>
 8004814:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <_puts_r+0xd0>)
 8004816:	429c      	cmp	r4, r3
 8004818:	d120      	bne.n	800485c <_puts_r+0x64>
 800481a:	686c      	ldr	r4, [r5, #4]
 800481c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800481e:	07db      	lsls	r3, r3, #31
 8004820:	d405      	bmi.n	800482e <_puts_r+0x36>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	0598      	lsls	r0, r3, #22
 8004826:	d402      	bmi.n	800482e <_puts_r+0x36>
 8004828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800482a:	f000 fad3 	bl	8004dd4 <__retarget_lock_acquire_recursive>
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	0719      	lsls	r1, r3, #28
 8004832:	d51d      	bpl.n	8004870 <_puts_r+0x78>
 8004834:	6923      	ldr	r3, [r4, #16]
 8004836:	b1db      	cbz	r3, 8004870 <_puts_r+0x78>
 8004838:	3e01      	subs	r6, #1
 800483a:	68a3      	ldr	r3, [r4, #8]
 800483c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004840:	3b01      	subs	r3, #1
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	bb39      	cbnz	r1, 8004896 <_puts_r+0x9e>
 8004846:	2b00      	cmp	r3, #0
 8004848:	da38      	bge.n	80048bc <_puts_r+0xc4>
 800484a:	4622      	mov	r2, r4
 800484c:	210a      	movs	r1, #10
 800484e:	4628      	mov	r0, r5
 8004850:	f000 f848 	bl	80048e4 <__swbuf_r>
 8004854:	3001      	adds	r0, #1
 8004856:	d011      	beq.n	800487c <_puts_r+0x84>
 8004858:	250a      	movs	r5, #10
 800485a:	e011      	b.n	8004880 <_puts_r+0x88>
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <_puts_r+0xd4>)
 800485e:	429c      	cmp	r4, r3
 8004860:	d101      	bne.n	8004866 <_puts_r+0x6e>
 8004862:	68ac      	ldr	r4, [r5, #8]
 8004864:	e7da      	b.n	800481c <_puts_r+0x24>
 8004866:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <_puts_r+0xd8>)
 8004868:	429c      	cmp	r4, r3
 800486a:	bf08      	it	eq
 800486c:	68ec      	ldreq	r4, [r5, #12]
 800486e:	e7d5      	b.n	800481c <_puts_r+0x24>
 8004870:	4621      	mov	r1, r4
 8004872:	4628      	mov	r0, r5
 8004874:	f000 f888 	bl	8004988 <__swsetup_r>
 8004878:	2800      	cmp	r0, #0
 800487a:	d0dd      	beq.n	8004838 <_puts_r+0x40>
 800487c:	f04f 35ff 	mov.w	r5, #4294967295
 8004880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004882:	07da      	lsls	r2, r3, #31
 8004884:	d405      	bmi.n	8004892 <_puts_r+0x9a>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	059b      	lsls	r3, r3, #22
 800488a:	d402      	bmi.n	8004892 <_puts_r+0x9a>
 800488c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800488e:	f000 faa2 	bl	8004dd6 <__retarget_lock_release_recursive>
 8004892:	4628      	mov	r0, r5
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	2b00      	cmp	r3, #0
 8004898:	da04      	bge.n	80048a4 <_puts_r+0xac>
 800489a:	69a2      	ldr	r2, [r4, #24]
 800489c:	429a      	cmp	r2, r3
 800489e:	dc06      	bgt.n	80048ae <_puts_r+0xb6>
 80048a0:	290a      	cmp	r1, #10
 80048a2:	d004      	beq.n	80048ae <_puts_r+0xb6>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	6022      	str	r2, [r4, #0]
 80048aa:	7019      	strb	r1, [r3, #0]
 80048ac:	e7c5      	b.n	800483a <_puts_r+0x42>
 80048ae:	4622      	mov	r2, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	f000 f817 	bl	80048e4 <__swbuf_r>
 80048b6:	3001      	adds	r0, #1
 80048b8:	d1bf      	bne.n	800483a <_puts_r+0x42>
 80048ba:	e7df      	b.n	800487c <_puts_r+0x84>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	250a      	movs	r5, #10
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	6022      	str	r2, [r4, #0]
 80048c4:	701d      	strb	r5, [r3, #0]
 80048c6:	e7db      	b.n	8004880 <_puts_r+0x88>
 80048c8:	08005890 	.word	0x08005890
 80048cc:	080058b0 	.word	0x080058b0
 80048d0:	08005870 	.word	0x08005870

080048d4 <puts>:
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <puts+0xc>)
 80048d6:	4601      	mov	r1, r0
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	f7ff bf8d 	b.w	80047f8 <_puts_r>
 80048de:	bf00      	nop
 80048e0:	2000007c 	.word	0x2000007c

080048e4 <__swbuf_r>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	460e      	mov	r6, r1
 80048e8:	4614      	mov	r4, r2
 80048ea:	4605      	mov	r5, r0
 80048ec:	b118      	cbz	r0, 80048f6 <__swbuf_r+0x12>
 80048ee:	6983      	ldr	r3, [r0, #24]
 80048f0:	b90b      	cbnz	r3, 80048f6 <__swbuf_r+0x12>
 80048f2:	f000 f9d1 	bl	8004c98 <__sinit>
 80048f6:	4b21      	ldr	r3, [pc, #132]	; (800497c <__swbuf_r+0x98>)
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d12b      	bne.n	8004954 <__swbuf_r+0x70>
 80048fc:	686c      	ldr	r4, [r5, #4]
 80048fe:	69a3      	ldr	r3, [r4, #24]
 8004900:	60a3      	str	r3, [r4, #8]
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	071a      	lsls	r2, r3, #28
 8004906:	d52f      	bpl.n	8004968 <__swbuf_r+0x84>
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	b36b      	cbz	r3, 8004968 <__swbuf_r+0x84>
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	1ac0      	subs	r0, r0, r3
 8004912:	6963      	ldr	r3, [r4, #20]
 8004914:	b2f6      	uxtb	r6, r6
 8004916:	4283      	cmp	r3, r0
 8004918:	4637      	mov	r7, r6
 800491a:	dc04      	bgt.n	8004926 <__swbuf_r+0x42>
 800491c:	4621      	mov	r1, r4
 800491e:	4628      	mov	r0, r5
 8004920:	f000 f926 	bl	8004b70 <_fflush_r>
 8004924:	bb30      	cbnz	r0, 8004974 <__swbuf_r+0x90>
 8004926:	68a3      	ldr	r3, [r4, #8]
 8004928:	3b01      	subs	r3, #1
 800492a:	60a3      	str	r3, [r4, #8]
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	6022      	str	r2, [r4, #0]
 8004932:	701e      	strb	r6, [r3, #0]
 8004934:	6963      	ldr	r3, [r4, #20]
 8004936:	3001      	adds	r0, #1
 8004938:	4283      	cmp	r3, r0
 800493a:	d004      	beq.n	8004946 <__swbuf_r+0x62>
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	07db      	lsls	r3, r3, #31
 8004940:	d506      	bpl.n	8004950 <__swbuf_r+0x6c>
 8004942:	2e0a      	cmp	r6, #10
 8004944:	d104      	bne.n	8004950 <__swbuf_r+0x6c>
 8004946:	4621      	mov	r1, r4
 8004948:	4628      	mov	r0, r5
 800494a:	f000 f911 	bl	8004b70 <_fflush_r>
 800494e:	b988      	cbnz	r0, 8004974 <__swbuf_r+0x90>
 8004950:	4638      	mov	r0, r7
 8004952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <__swbuf_r+0x9c>)
 8004956:	429c      	cmp	r4, r3
 8004958:	d101      	bne.n	800495e <__swbuf_r+0x7a>
 800495a:	68ac      	ldr	r4, [r5, #8]
 800495c:	e7cf      	b.n	80048fe <__swbuf_r+0x1a>
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <__swbuf_r+0xa0>)
 8004960:	429c      	cmp	r4, r3
 8004962:	bf08      	it	eq
 8004964:	68ec      	ldreq	r4, [r5, #12]
 8004966:	e7ca      	b.n	80048fe <__swbuf_r+0x1a>
 8004968:	4621      	mov	r1, r4
 800496a:	4628      	mov	r0, r5
 800496c:	f000 f80c 	bl	8004988 <__swsetup_r>
 8004970:	2800      	cmp	r0, #0
 8004972:	d0cb      	beq.n	800490c <__swbuf_r+0x28>
 8004974:	f04f 37ff 	mov.w	r7, #4294967295
 8004978:	e7ea      	b.n	8004950 <__swbuf_r+0x6c>
 800497a:	bf00      	nop
 800497c:	08005890 	.word	0x08005890
 8004980:	080058b0 	.word	0x080058b0
 8004984:	08005870 	.word	0x08005870

08004988 <__swsetup_r>:
 8004988:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <__swsetup_r+0xcc>)
 800498a:	b570      	push	{r4, r5, r6, lr}
 800498c:	681d      	ldr	r5, [r3, #0]
 800498e:	4606      	mov	r6, r0
 8004990:	460c      	mov	r4, r1
 8004992:	b125      	cbz	r5, 800499e <__swsetup_r+0x16>
 8004994:	69ab      	ldr	r3, [r5, #24]
 8004996:	b913      	cbnz	r3, 800499e <__swsetup_r+0x16>
 8004998:	4628      	mov	r0, r5
 800499a:	f000 f97d 	bl	8004c98 <__sinit>
 800499e:	4b2e      	ldr	r3, [pc, #184]	; (8004a58 <__swsetup_r+0xd0>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d10f      	bne.n	80049c4 <__swsetup_r+0x3c>
 80049a4:	686c      	ldr	r4, [r5, #4]
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049ac:	0719      	lsls	r1, r3, #28
 80049ae:	d42c      	bmi.n	8004a0a <__swsetup_r+0x82>
 80049b0:	06dd      	lsls	r5, r3, #27
 80049b2:	d411      	bmi.n	80049d8 <__swsetup_r+0x50>
 80049b4:	2309      	movs	r3, #9
 80049b6:	6033      	str	r3, [r6, #0]
 80049b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	f04f 30ff 	mov.w	r0, #4294967295
 80049c2:	e03e      	b.n	8004a42 <__swsetup_r+0xba>
 80049c4:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <__swsetup_r+0xd4>)
 80049c6:	429c      	cmp	r4, r3
 80049c8:	d101      	bne.n	80049ce <__swsetup_r+0x46>
 80049ca:	68ac      	ldr	r4, [r5, #8]
 80049cc:	e7eb      	b.n	80049a6 <__swsetup_r+0x1e>
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <__swsetup_r+0xd8>)
 80049d0:	429c      	cmp	r4, r3
 80049d2:	bf08      	it	eq
 80049d4:	68ec      	ldreq	r4, [r5, #12]
 80049d6:	e7e6      	b.n	80049a6 <__swsetup_r+0x1e>
 80049d8:	0758      	lsls	r0, r3, #29
 80049da:	d512      	bpl.n	8004a02 <__swsetup_r+0x7a>
 80049dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049de:	b141      	cbz	r1, 80049f2 <__swsetup_r+0x6a>
 80049e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049e4:	4299      	cmp	r1, r3
 80049e6:	d002      	beq.n	80049ee <__swsetup_r+0x66>
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 fa5b 	bl	8004ea4 <_free_r>
 80049ee:	2300      	movs	r3, #0
 80049f0:	6363      	str	r3, [r4, #52]	; 0x34
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049f8:	81a3      	strh	r3, [r4, #12]
 80049fa:	2300      	movs	r3, #0
 80049fc:	6063      	str	r3, [r4, #4]
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	f043 0308 	orr.w	r3, r3, #8
 8004a08:	81a3      	strh	r3, [r4, #12]
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	b94b      	cbnz	r3, 8004a22 <__swsetup_r+0x9a>
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a18:	d003      	beq.n	8004a22 <__swsetup_r+0x9a>
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f000 fa01 	bl	8004e24 <__smakebuf_r>
 8004a22:	89a0      	ldrh	r0, [r4, #12]
 8004a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a28:	f010 0301 	ands.w	r3, r0, #1
 8004a2c:	d00a      	beq.n	8004a44 <__swsetup_r+0xbc>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60a3      	str	r3, [r4, #8]
 8004a32:	6963      	ldr	r3, [r4, #20]
 8004a34:	425b      	negs	r3, r3
 8004a36:	61a3      	str	r3, [r4, #24]
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	b943      	cbnz	r3, 8004a4e <__swsetup_r+0xc6>
 8004a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a40:	d1ba      	bne.n	80049b8 <__swsetup_r+0x30>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	0781      	lsls	r1, r0, #30
 8004a46:	bf58      	it	pl
 8004a48:	6963      	ldrpl	r3, [r4, #20]
 8004a4a:	60a3      	str	r3, [r4, #8]
 8004a4c:	e7f4      	b.n	8004a38 <__swsetup_r+0xb0>
 8004a4e:	2000      	movs	r0, #0
 8004a50:	e7f7      	b.n	8004a42 <__swsetup_r+0xba>
 8004a52:	bf00      	nop
 8004a54:	2000007c 	.word	0x2000007c
 8004a58:	08005890 	.word	0x08005890
 8004a5c:	080058b0 	.word	0x080058b0
 8004a60:	08005870 	.word	0x08005870

08004a64 <__sflush_r>:
 8004a64:	898a      	ldrh	r2, [r1, #12]
 8004a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	0710      	lsls	r0, r2, #28
 8004a6e:	460c      	mov	r4, r1
 8004a70:	d458      	bmi.n	8004b24 <__sflush_r+0xc0>
 8004a72:	684b      	ldr	r3, [r1, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dc05      	bgt.n	8004a84 <__sflush_r+0x20>
 8004a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dc02      	bgt.n	8004a84 <__sflush_r+0x20>
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	d0f9      	beq.n	8004a7e <__sflush_r+0x1a>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a90:	682f      	ldr	r7, [r5, #0]
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	d032      	beq.n	8004afc <__sflush_r+0x98>
 8004a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	075a      	lsls	r2, r3, #29
 8004a9c:	d505      	bpl.n	8004aaa <__sflush_r+0x46>
 8004a9e:	6863      	ldr	r3, [r4, #4]
 8004aa0:	1ac0      	subs	r0, r0, r3
 8004aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004aa4:	b10b      	cbz	r3, 8004aaa <__sflush_r+0x46>
 8004aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aa8:	1ac0      	subs	r0, r0, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4602      	mov	r2, r0
 8004aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ab0:	6a21      	ldr	r1, [r4, #32]
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b0      	blx	r6
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	d106      	bne.n	8004aca <__sflush_r+0x66>
 8004abc:	6829      	ldr	r1, [r5, #0]
 8004abe:	291d      	cmp	r1, #29
 8004ac0:	d82c      	bhi.n	8004b1c <__sflush_r+0xb8>
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <__sflush_r+0x108>)
 8004ac4:	40ca      	lsrs	r2, r1
 8004ac6:	07d6      	lsls	r6, r2, #31
 8004ac8:	d528      	bpl.n	8004b1c <__sflush_r+0xb8>
 8004aca:	2200      	movs	r2, #0
 8004acc:	6062      	str	r2, [r4, #4]
 8004ace:	04d9      	lsls	r1, r3, #19
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	6022      	str	r2, [r4, #0]
 8004ad4:	d504      	bpl.n	8004ae0 <__sflush_r+0x7c>
 8004ad6:	1c42      	adds	r2, r0, #1
 8004ad8:	d101      	bne.n	8004ade <__sflush_r+0x7a>
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	b903      	cbnz	r3, 8004ae0 <__sflush_r+0x7c>
 8004ade:	6560      	str	r0, [r4, #84]	; 0x54
 8004ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ae2:	602f      	str	r7, [r5, #0]
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	d0ca      	beq.n	8004a7e <__sflush_r+0x1a>
 8004ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aec:	4299      	cmp	r1, r3
 8004aee:	d002      	beq.n	8004af6 <__sflush_r+0x92>
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 f9d7 	bl	8004ea4 <_free_r>
 8004af6:	2000      	movs	r0, #0
 8004af8:	6360      	str	r0, [r4, #52]	; 0x34
 8004afa:	e7c1      	b.n	8004a80 <__sflush_r+0x1c>
 8004afc:	6a21      	ldr	r1, [r4, #32]
 8004afe:	2301      	movs	r3, #1
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b0      	blx	r6
 8004b04:	1c41      	adds	r1, r0, #1
 8004b06:	d1c7      	bne.n	8004a98 <__sflush_r+0x34>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0c4      	beq.n	8004a98 <__sflush_r+0x34>
 8004b0e:	2b1d      	cmp	r3, #29
 8004b10:	d001      	beq.n	8004b16 <__sflush_r+0xb2>
 8004b12:	2b16      	cmp	r3, #22
 8004b14:	d101      	bne.n	8004b1a <__sflush_r+0xb6>
 8004b16:	602f      	str	r7, [r5, #0]
 8004b18:	e7b1      	b.n	8004a7e <__sflush_r+0x1a>
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b20:	81a3      	strh	r3, [r4, #12]
 8004b22:	e7ad      	b.n	8004a80 <__sflush_r+0x1c>
 8004b24:	690f      	ldr	r7, [r1, #16]
 8004b26:	2f00      	cmp	r7, #0
 8004b28:	d0a9      	beq.n	8004a7e <__sflush_r+0x1a>
 8004b2a:	0793      	lsls	r3, r2, #30
 8004b2c:	680e      	ldr	r6, [r1, #0]
 8004b2e:	bf08      	it	eq
 8004b30:	694b      	ldreq	r3, [r1, #20]
 8004b32:	600f      	str	r7, [r1, #0]
 8004b34:	bf18      	it	ne
 8004b36:	2300      	movne	r3, #0
 8004b38:	eba6 0807 	sub.w	r8, r6, r7
 8004b3c:	608b      	str	r3, [r1, #8]
 8004b3e:	f1b8 0f00 	cmp.w	r8, #0
 8004b42:	dd9c      	ble.n	8004a7e <__sflush_r+0x1a>
 8004b44:	6a21      	ldr	r1, [r4, #32]
 8004b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b48:	4643      	mov	r3, r8
 8004b4a:	463a      	mov	r2, r7
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	47b0      	blx	r6
 8004b50:	2800      	cmp	r0, #0
 8004b52:	dc06      	bgt.n	8004b62 <__sflush_r+0xfe>
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b60:	e78e      	b.n	8004a80 <__sflush_r+0x1c>
 8004b62:	4407      	add	r7, r0
 8004b64:	eba8 0800 	sub.w	r8, r8, r0
 8004b68:	e7e9      	b.n	8004b3e <__sflush_r+0xda>
 8004b6a:	bf00      	nop
 8004b6c:	20400001 	.word	0x20400001

08004b70 <_fflush_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	690b      	ldr	r3, [r1, #16]
 8004b74:	4605      	mov	r5, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	b913      	cbnz	r3, 8004b80 <_fflush_r+0x10>
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	b118      	cbz	r0, 8004b8a <_fflush_r+0x1a>
 8004b82:	6983      	ldr	r3, [r0, #24]
 8004b84:	b90b      	cbnz	r3, 8004b8a <_fflush_r+0x1a>
 8004b86:	f000 f887 	bl	8004c98 <__sinit>
 8004b8a:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <_fflush_r+0x6c>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d11b      	bne.n	8004bc8 <_fflush_r+0x58>
 8004b90:	686c      	ldr	r4, [r5, #4]
 8004b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0ef      	beq.n	8004b7a <_fflush_r+0xa>
 8004b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b9c:	07d0      	lsls	r0, r2, #31
 8004b9e:	d404      	bmi.n	8004baa <_fflush_r+0x3a>
 8004ba0:	0599      	lsls	r1, r3, #22
 8004ba2:	d402      	bmi.n	8004baa <_fflush_r+0x3a>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ba6:	f000 f915 	bl	8004dd4 <__retarget_lock_acquire_recursive>
 8004baa:	4628      	mov	r0, r5
 8004bac:	4621      	mov	r1, r4
 8004bae:	f7ff ff59 	bl	8004a64 <__sflush_r>
 8004bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bb4:	07da      	lsls	r2, r3, #31
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	d4e0      	bmi.n	8004b7c <_fflush_r+0xc>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	059b      	lsls	r3, r3, #22
 8004bbe:	d4dd      	bmi.n	8004b7c <_fflush_r+0xc>
 8004bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bc2:	f000 f908 	bl	8004dd6 <__retarget_lock_release_recursive>
 8004bc6:	e7d9      	b.n	8004b7c <_fflush_r+0xc>
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <_fflush_r+0x70>)
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d101      	bne.n	8004bd2 <_fflush_r+0x62>
 8004bce:	68ac      	ldr	r4, [r5, #8]
 8004bd0:	e7df      	b.n	8004b92 <_fflush_r+0x22>
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <_fflush_r+0x74>)
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	bf08      	it	eq
 8004bd8:	68ec      	ldreq	r4, [r5, #12]
 8004bda:	e7da      	b.n	8004b92 <_fflush_r+0x22>
 8004bdc:	08005890 	.word	0x08005890
 8004be0:	080058b0 	.word	0x080058b0
 8004be4:	08005870 	.word	0x08005870

08004be8 <std>:
 8004be8:	2300      	movs	r3, #0
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bf6:	6083      	str	r3, [r0, #8]
 8004bf8:	8181      	strh	r1, [r0, #12]
 8004bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8004bfc:	81c2      	strh	r2, [r0, #14]
 8004bfe:	6183      	str	r3, [r0, #24]
 8004c00:	4619      	mov	r1, r3
 8004c02:	2208      	movs	r2, #8
 8004c04:	305c      	adds	r0, #92	; 0x5c
 8004c06:	f7ff fdd7 	bl	80047b8 <memset>
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <std+0x38>)
 8004c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <std+0x3c>)
 8004c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <std+0x40>)
 8004c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <std+0x44>)
 8004c18:	6224      	str	r4, [r4, #32]
 8004c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	bf00      	nop
 8004c20:	08005661 	.word	0x08005661
 8004c24:	08005683 	.word	0x08005683
 8004c28:	080056bb 	.word	0x080056bb
 8004c2c:	080056df 	.word	0x080056df

08004c30 <_cleanup_r>:
 8004c30:	4901      	ldr	r1, [pc, #4]	; (8004c38 <_cleanup_r+0x8>)
 8004c32:	f000 b8af 	b.w	8004d94 <_fwalk_reent>
 8004c36:	bf00      	nop
 8004c38:	08004b71 	.word	0x08004b71

08004c3c <__sfmoreglue>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	2268      	movs	r2, #104	; 0x68
 8004c40:	1e4d      	subs	r5, r1, #1
 8004c42:	4355      	muls	r5, r2
 8004c44:	460e      	mov	r6, r1
 8004c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c4a:	f000 f997 	bl	8004f7c <_malloc_r>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	b140      	cbz	r0, 8004c64 <__sfmoreglue+0x28>
 8004c52:	2100      	movs	r1, #0
 8004c54:	e9c0 1600 	strd	r1, r6, [r0]
 8004c58:	300c      	adds	r0, #12
 8004c5a:	60a0      	str	r0, [r4, #8]
 8004c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c60:	f7ff fdaa 	bl	80047b8 <memset>
 8004c64:	4620      	mov	r0, r4
 8004c66:	bd70      	pop	{r4, r5, r6, pc}

08004c68 <__sfp_lock_acquire>:
 8004c68:	4801      	ldr	r0, [pc, #4]	; (8004c70 <__sfp_lock_acquire+0x8>)
 8004c6a:	f000 b8b3 	b.w	8004dd4 <__retarget_lock_acquire_recursive>
 8004c6e:	bf00      	nop
 8004c70:	200001ed 	.word	0x200001ed

08004c74 <__sfp_lock_release>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__sfp_lock_release+0x8>)
 8004c76:	f000 b8ae 	b.w	8004dd6 <__retarget_lock_release_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	200001ed 	.word	0x200001ed

08004c80 <__sinit_lock_acquire>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__sinit_lock_acquire+0x8>)
 8004c82:	f000 b8a7 	b.w	8004dd4 <__retarget_lock_acquire_recursive>
 8004c86:	bf00      	nop
 8004c88:	200001ee 	.word	0x200001ee

08004c8c <__sinit_lock_release>:
 8004c8c:	4801      	ldr	r0, [pc, #4]	; (8004c94 <__sinit_lock_release+0x8>)
 8004c8e:	f000 b8a2 	b.w	8004dd6 <__retarget_lock_release_recursive>
 8004c92:	bf00      	nop
 8004c94:	200001ee 	.word	0x200001ee

08004c98 <__sinit>:
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	f7ff fff0 	bl	8004c80 <__sinit_lock_acquire>
 8004ca0:	69a3      	ldr	r3, [r4, #24]
 8004ca2:	b11b      	cbz	r3, 8004cac <__sinit+0x14>
 8004ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca8:	f7ff bff0 	b.w	8004c8c <__sinit_lock_release>
 8004cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8004cb2:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <__sinit+0x68>)
 8004cb4:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <__sinit+0x6c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cba:	42a3      	cmp	r3, r4
 8004cbc:	bf04      	itt	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	61a3      	streq	r3, [r4, #24]
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f820 	bl	8004d08 <__sfp>
 8004cc8:	6060      	str	r0, [r4, #4]
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 f81c 	bl	8004d08 <__sfp>
 8004cd0:	60a0      	str	r0, [r4, #8]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f818 	bl	8004d08 <__sfp>
 8004cd8:	2200      	movs	r2, #0
 8004cda:	60e0      	str	r0, [r4, #12]
 8004cdc:	2104      	movs	r1, #4
 8004cde:	6860      	ldr	r0, [r4, #4]
 8004ce0:	f7ff ff82 	bl	8004be8 <std>
 8004ce4:	68a0      	ldr	r0, [r4, #8]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2109      	movs	r1, #9
 8004cea:	f7ff ff7d 	bl	8004be8 <std>
 8004cee:	68e0      	ldr	r0, [r4, #12]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	2112      	movs	r1, #18
 8004cf4:	f7ff ff78 	bl	8004be8 <std>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	61a3      	str	r3, [r4, #24]
 8004cfc:	e7d2      	b.n	8004ca4 <__sinit+0xc>
 8004cfe:	bf00      	nop
 8004d00:	0800586c 	.word	0x0800586c
 8004d04:	08004c31 	.word	0x08004c31

08004d08 <__sfp>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	4607      	mov	r7, r0
 8004d0c:	f7ff ffac 	bl	8004c68 <__sfp_lock_acquire>
 8004d10:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <__sfp+0x84>)
 8004d12:	681e      	ldr	r6, [r3, #0]
 8004d14:	69b3      	ldr	r3, [r6, #24]
 8004d16:	b913      	cbnz	r3, 8004d1e <__sfp+0x16>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f7ff ffbd 	bl	8004c98 <__sinit>
 8004d1e:	3648      	adds	r6, #72	; 0x48
 8004d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	d503      	bpl.n	8004d30 <__sfp+0x28>
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	b30b      	cbz	r3, 8004d70 <__sfp+0x68>
 8004d2c:	6836      	ldr	r6, [r6, #0]
 8004d2e:	e7f7      	b.n	8004d20 <__sfp+0x18>
 8004d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d34:	b9d5      	cbnz	r5, 8004d6c <__sfp+0x64>
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <__sfp+0x88>)
 8004d38:	60e3      	str	r3, [r4, #12]
 8004d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d40:	f000 f847 	bl	8004dd2 <__retarget_lock_init_recursive>
 8004d44:	f7ff ff96 	bl	8004c74 <__sfp_lock_release>
 8004d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d50:	6025      	str	r5, [r4, #0]
 8004d52:	61a5      	str	r5, [r4, #24]
 8004d54:	2208      	movs	r2, #8
 8004d56:	4629      	mov	r1, r5
 8004d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d5c:	f7ff fd2c 	bl	80047b8 <memset>
 8004d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d68:	4620      	mov	r0, r4
 8004d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d6c:	3468      	adds	r4, #104	; 0x68
 8004d6e:	e7d9      	b.n	8004d24 <__sfp+0x1c>
 8004d70:	2104      	movs	r1, #4
 8004d72:	4638      	mov	r0, r7
 8004d74:	f7ff ff62 	bl	8004c3c <__sfmoreglue>
 8004d78:	4604      	mov	r4, r0
 8004d7a:	6030      	str	r0, [r6, #0]
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d1d5      	bne.n	8004d2c <__sfp+0x24>
 8004d80:	f7ff ff78 	bl	8004c74 <__sfp_lock_release>
 8004d84:	230c      	movs	r3, #12
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	e7ee      	b.n	8004d68 <__sfp+0x60>
 8004d8a:	bf00      	nop
 8004d8c:	0800586c 	.word	0x0800586c
 8004d90:	ffff0001 	.word	0xffff0001

08004d94 <_fwalk_reent>:
 8004d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d98:	4606      	mov	r6, r0
 8004d9a:	4688      	mov	r8, r1
 8004d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004da0:	2700      	movs	r7, #0
 8004da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004da6:	f1b9 0901 	subs.w	r9, r9, #1
 8004daa:	d505      	bpl.n	8004db8 <_fwalk_reent+0x24>
 8004dac:	6824      	ldr	r4, [r4, #0]
 8004dae:	2c00      	cmp	r4, #0
 8004db0:	d1f7      	bne.n	8004da2 <_fwalk_reent+0xe>
 8004db2:	4638      	mov	r0, r7
 8004db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db8:	89ab      	ldrh	r3, [r5, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d907      	bls.n	8004dce <_fwalk_reent+0x3a>
 8004dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	d003      	beq.n	8004dce <_fwalk_reent+0x3a>
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	4630      	mov	r0, r6
 8004dca:	47c0      	blx	r8
 8004dcc:	4307      	orrs	r7, r0
 8004dce:	3568      	adds	r5, #104	; 0x68
 8004dd0:	e7e9      	b.n	8004da6 <_fwalk_reent+0x12>

08004dd2 <__retarget_lock_init_recursive>:
 8004dd2:	4770      	bx	lr

08004dd4 <__retarget_lock_acquire_recursive>:
 8004dd4:	4770      	bx	lr

08004dd6 <__retarget_lock_release_recursive>:
 8004dd6:	4770      	bx	lr

08004dd8 <__swhatbuf_r>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	460e      	mov	r6, r1
 8004ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de0:	2900      	cmp	r1, #0
 8004de2:	b096      	sub	sp, #88	; 0x58
 8004de4:	4614      	mov	r4, r2
 8004de6:	461d      	mov	r5, r3
 8004de8:	da08      	bge.n	8004dfc <__swhatbuf_r+0x24>
 8004dea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	061a      	lsls	r2, r3, #24
 8004df4:	d410      	bmi.n	8004e18 <__swhatbuf_r+0x40>
 8004df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dfa:	e00e      	b.n	8004e1a <__swhatbuf_r+0x42>
 8004dfc:	466a      	mov	r2, sp
 8004dfe:	f000 fc95 	bl	800572c <_fstat_r>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	dbf1      	blt.n	8004dea <__swhatbuf_r+0x12>
 8004e06:	9a01      	ldr	r2, [sp, #4]
 8004e08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e10:	425a      	negs	r2, r3
 8004e12:	415a      	adcs	r2, r3
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	e7ee      	b.n	8004df6 <__swhatbuf_r+0x1e>
 8004e18:	2340      	movs	r3, #64	; 0x40
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	b016      	add	sp, #88	; 0x58
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e24 <__smakebuf_r>:
 8004e24:	898b      	ldrh	r3, [r1, #12]
 8004e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e28:	079d      	lsls	r5, r3, #30
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	d507      	bpl.n	8004e40 <__smakebuf_r+0x1c>
 8004e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6163      	str	r3, [r4, #20]
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	ab01      	add	r3, sp, #4
 8004e42:	466a      	mov	r2, sp
 8004e44:	f7ff ffc8 	bl	8004dd8 <__swhatbuf_r>
 8004e48:	9900      	ldr	r1, [sp, #0]
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	4630      	mov	r0, r6
 8004e4e:	f000 f895 	bl	8004f7c <_malloc_r>
 8004e52:	b948      	cbnz	r0, 8004e68 <__smakebuf_r+0x44>
 8004e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e58:	059a      	lsls	r2, r3, #22
 8004e5a:	d4ef      	bmi.n	8004e3c <__smakebuf_r+0x18>
 8004e5c:	f023 0303 	bic.w	r3, r3, #3
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	81a3      	strh	r3, [r4, #12]
 8004e66:	e7e3      	b.n	8004e30 <__smakebuf_r+0xc>
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <__smakebuf_r+0x7c>)
 8004e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	6020      	str	r0, [r4, #0]
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	81a3      	strh	r3, [r4, #12]
 8004e76:	9b00      	ldr	r3, [sp, #0]
 8004e78:	6163      	str	r3, [r4, #20]
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	6120      	str	r0, [r4, #16]
 8004e7e:	b15b      	cbz	r3, 8004e98 <__smakebuf_r+0x74>
 8004e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e84:	4630      	mov	r0, r6
 8004e86:	f000 fc63 	bl	8005750 <_isatty_r>
 8004e8a:	b128      	cbz	r0, 8004e98 <__smakebuf_r+0x74>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	89a0      	ldrh	r0, [r4, #12]
 8004e9a:	4305      	orrs	r5, r0
 8004e9c:	81a5      	strh	r5, [r4, #12]
 8004e9e:	e7cd      	b.n	8004e3c <__smakebuf_r+0x18>
 8004ea0:	08004c31 	.word	0x08004c31

08004ea4 <_free_r>:
 8004ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ea6:	2900      	cmp	r1, #0
 8004ea8:	d044      	beq.n	8004f34 <_free_r+0x90>
 8004eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eae:	9001      	str	r0, [sp, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8004eb6:	bfb8      	it	lt
 8004eb8:	18e4      	addlt	r4, r4, r3
 8004eba:	f000 fc6b 	bl	8005794 <__malloc_lock>
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <_free_r+0x94>)
 8004ec0:	9801      	ldr	r0, [sp, #4]
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	b933      	cbnz	r3, 8004ed4 <_free_r+0x30>
 8004ec6:	6063      	str	r3, [r4, #4]
 8004ec8:	6014      	str	r4, [r2, #0]
 8004eca:	b003      	add	sp, #12
 8004ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ed0:	f000 bc66 	b.w	80057a0 <__malloc_unlock>
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	d908      	bls.n	8004eea <_free_r+0x46>
 8004ed8:	6825      	ldr	r5, [r4, #0]
 8004eda:	1961      	adds	r1, r4, r5
 8004edc:	428b      	cmp	r3, r1
 8004ede:	bf01      	itttt	eq
 8004ee0:	6819      	ldreq	r1, [r3, #0]
 8004ee2:	685b      	ldreq	r3, [r3, #4]
 8004ee4:	1949      	addeq	r1, r1, r5
 8004ee6:	6021      	streq	r1, [r4, #0]
 8004ee8:	e7ed      	b.n	8004ec6 <_free_r+0x22>
 8004eea:	461a      	mov	r2, r3
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	b10b      	cbz	r3, 8004ef4 <_free_r+0x50>
 8004ef0:	42a3      	cmp	r3, r4
 8004ef2:	d9fa      	bls.n	8004eea <_free_r+0x46>
 8004ef4:	6811      	ldr	r1, [r2, #0]
 8004ef6:	1855      	adds	r5, r2, r1
 8004ef8:	42a5      	cmp	r5, r4
 8004efa:	d10b      	bne.n	8004f14 <_free_r+0x70>
 8004efc:	6824      	ldr	r4, [r4, #0]
 8004efe:	4421      	add	r1, r4
 8004f00:	1854      	adds	r4, r2, r1
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	6011      	str	r1, [r2, #0]
 8004f06:	d1e0      	bne.n	8004eca <_free_r+0x26>
 8004f08:	681c      	ldr	r4, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	6053      	str	r3, [r2, #4]
 8004f0e:	4421      	add	r1, r4
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	e7da      	b.n	8004eca <_free_r+0x26>
 8004f14:	d902      	bls.n	8004f1c <_free_r+0x78>
 8004f16:	230c      	movs	r3, #12
 8004f18:	6003      	str	r3, [r0, #0]
 8004f1a:	e7d6      	b.n	8004eca <_free_r+0x26>
 8004f1c:	6825      	ldr	r5, [r4, #0]
 8004f1e:	1961      	adds	r1, r4, r5
 8004f20:	428b      	cmp	r3, r1
 8004f22:	bf04      	itt	eq
 8004f24:	6819      	ldreq	r1, [r3, #0]
 8004f26:	685b      	ldreq	r3, [r3, #4]
 8004f28:	6063      	str	r3, [r4, #4]
 8004f2a:	bf04      	itt	eq
 8004f2c:	1949      	addeq	r1, r1, r5
 8004f2e:	6021      	streq	r1, [r4, #0]
 8004f30:	6054      	str	r4, [r2, #4]
 8004f32:	e7ca      	b.n	8004eca <_free_r+0x26>
 8004f34:	b003      	add	sp, #12
 8004f36:	bd30      	pop	{r4, r5, pc}
 8004f38:	200001f0 	.word	0x200001f0

08004f3c <sbrk_aligned>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	4e0e      	ldr	r6, [pc, #56]	; (8004f78 <sbrk_aligned+0x3c>)
 8004f40:	460c      	mov	r4, r1
 8004f42:	6831      	ldr	r1, [r6, #0]
 8004f44:	4605      	mov	r5, r0
 8004f46:	b911      	cbnz	r1, 8004f4e <sbrk_aligned+0x12>
 8004f48:	f000 fb7a 	bl	8005640 <_sbrk_r>
 8004f4c:	6030      	str	r0, [r6, #0]
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 fb75 	bl	8005640 <_sbrk_r>
 8004f56:	1c43      	adds	r3, r0, #1
 8004f58:	d00a      	beq.n	8004f70 <sbrk_aligned+0x34>
 8004f5a:	1cc4      	adds	r4, r0, #3
 8004f5c:	f024 0403 	bic.w	r4, r4, #3
 8004f60:	42a0      	cmp	r0, r4
 8004f62:	d007      	beq.n	8004f74 <sbrk_aligned+0x38>
 8004f64:	1a21      	subs	r1, r4, r0
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 fb6a 	bl	8005640 <_sbrk_r>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d101      	bne.n	8004f74 <sbrk_aligned+0x38>
 8004f70:	f04f 34ff 	mov.w	r4, #4294967295
 8004f74:	4620      	mov	r0, r4
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	200001f4 	.word	0x200001f4

08004f7c <_malloc_r>:
 8004f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f80:	1ccd      	adds	r5, r1, #3
 8004f82:	f025 0503 	bic.w	r5, r5, #3
 8004f86:	3508      	adds	r5, #8
 8004f88:	2d0c      	cmp	r5, #12
 8004f8a:	bf38      	it	cc
 8004f8c:	250c      	movcc	r5, #12
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	4607      	mov	r7, r0
 8004f92:	db01      	blt.n	8004f98 <_malloc_r+0x1c>
 8004f94:	42a9      	cmp	r1, r5
 8004f96:	d905      	bls.n	8004fa4 <_malloc_r+0x28>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	2600      	movs	r6, #0
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa4:	4e2e      	ldr	r6, [pc, #184]	; (8005060 <_malloc_r+0xe4>)
 8004fa6:	f000 fbf5 	bl	8005794 <__malloc_lock>
 8004faa:	6833      	ldr	r3, [r6, #0]
 8004fac:	461c      	mov	r4, r3
 8004fae:	bb34      	cbnz	r4, 8004ffe <_malloc_r+0x82>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	f7ff ffc2 	bl	8004f3c <sbrk_aligned>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	4604      	mov	r4, r0
 8004fbc:	d14d      	bne.n	800505a <_malloc_r+0xde>
 8004fbe:	6834      	ldr	r4, [r6, #0]
 8004fc0:	4626      	mov	r6, r4
 8004fc2:	2e00      	cmp	r6, #0
 8004fc4:	d140      	bne.n	8005048 <_malloc_r+0xcc>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4638      	mov	r0, r7
 8004fcc:	eb04 0803 	add.w	r8, r4, r3
 8004fd0:	f000 fb36 	bl	8005640 <_sbrk_r>
 8004fd4:	4580      	cmp	r8, r0
 8004fd6:	d13a      	bne.n	800504e <_malloc_r+0xd2>
 8004fd8:	6821      	ldr	r1, [r4, #0]
 8004fda:	3503      	adds	r5, #3
 8004fdc:	1a6d      	subs	r5, r5, r1
 8004fde:	f025 0503 	bic.w	r5, r5, #3
 8004fe2:	3508      	adds	r5, #8
 8004fe4:	2d0c      	cmp	r5, #12
 8004fe6:	bf38      	it	cc
 8004fe8:	250c      	movcc	r5, #12
 8004fea:	4629      	mov	r1, r5
 8004fec:	4638      	mov	r0, r7
 8004fee:	f7ff ffa5 	bl	8004f3c <sbrk_aligned>
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	d02b      	beq.n	800504e <_malloc_r+0xd2>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	442b      	add	r3, r5
 8004ffa:	6023      	str	r3, [r4, #0]
 8004ffc:	e00e      	b.n	800501c <_malloc_r+0xa0>
 8004ffe:	6822      	ldr	r2, [r4, #0]
 8005000:	1b52      	subs	r2, r2, r5
 8005002:	d41e      	bmi.n	8005042 <_malloc_r+0xc6>
 8005004:	2a0b      	cmp	r2, #11
 8005006:	d916      	bls.n	8005036 <_malloc_r+0xba>
 8005008:	1961      	adds	r1, r4, r5
 800500a:	42a3      	cmp	r3, r4
 800500c:	6025      	str	r5, [r4, #0]
 800500e:	bf18      	it	ne
 8005010:	6059      	strne	r1, [r3, #4]
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	bf08      	it	eq
 8005016:	6031      	streq	r1, [r6, #0]
 8005018:	5162      	str	r2, [r4, r5]
 800501a:	604b      	str	r3, [r1, #4]
 800501c:	4638      	mov	r0, r7
 800501e:	f104 060b 	add.w	r6, r4, #11
 8005022:	f000 fbbd 	bl	80057a0 <__malloc_unlock>
 8005026:	f026 0607 	bic.w	r6, r6, #7
 800502a:	1d23      	adds	r3, r4, #4
 800502c:	1af2      	subs	r2, r6, r3
 800502e:	d0b6      	beq.n	8004f9e <_malloc_r+0x22>
 8005030:	1b9b      	subs	r3, r3, r6
 8005032:	50a3      	str	r3, [r4, r2]
 8005034:	e7b3      	b.n	8004f9e <_malloc_r+0x22>
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	42a3      	cmp	r3, r4
 800503a:	bf0c      	ite	eq
 800503c:	6032      	streq	r2, [r6, #0]
 800503e:	605a      	strne	r2, [r3, #4]
 8005040:	e7ec      	b.n	800501c <_malloc_r+0xa0>
 8005042:	4623      	mov	r3, r4
 8005044:	6864      	ldr	r4, [r4, #4]
 8005046:	e7b2      	b.n	8004fae <_malloc_r+0x32>
 8005048:	4634      	mov	r4, r6
 800504a:	6876      	ldr	r6, [r6, #4]
 800504c:	e7b9      	b.n	8004fc2 <_malloc_r+0x46>
 800504e:	230c      	movs	r3, #12
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	4638      	mov	r0, r7
 8005054:	f000 fba4 	bl	80057a0 <__malloc_unlock>
 8005058:	e7a1      	b.n	8004f9e <_malloc_r+0x22>
 800505a:	6025      	str	r5, [r4, #0]
 800505c:	e7de      	b.n	800501c <_malloc_r+0xa0>
 800505e:	bf00      	nop
 8005060:	200001f0 	.word	0x200001f0

08005064 <__sfputc_r>:
 8005064:	6893      	ldr	r3, [r2, #8]
 8005066:	3b01      	subs	r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	b410      	push	{r4}
 800506c:	6093      	str	r3, [r2, #8]
 800506e:	da08      	bge.n	8005082 <__sfputc_r+0x1e>
 8005070:	6994      	ldr	r4, [r2, #24]
 8005072:	42a3      	cmp	r3, r4
 8005074:	db01      	blt.n	800507a <__sfputc_r+0x16>
 8005076:	290a      	cmp	r1, #10
 8005078:	d103      	bne.n	8005082 <__sfputc_r+0x1e>
 800507a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800507e:	f7ff bc31 	b.w	80048e4 <__swbuf_r>
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	1c58      	adds	r0, r3, #1
 8005086:	6010      	str	r0, [r2, #0]
 8005088:	7019      	strb	r1, [r3, #0]
 800508a:	4608      	mov	r0, r1
 800508c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005090:	4770      	bx	lr

08005092 <__sfputs_r>:
 8005092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005094:	4606      	mov	r6, r0
 8005096:	460f      	mov	r7, r1
 8005098:	4614      	mov	r4, r2
 800509a:	18d5      	adds	r5, r2, r3
 800509c:	42ac      	cmp	r4, r5
 800509e:	d101      	bne.n	80050a4 <__sfputs_r+0x12>
 80050a0:	2000      	movs	r0, #0
 80050a2:	e007      	b.n	80050b4 <__sfputs_r+0x22>
 80050a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a8:	463a      	mov	r2, r7
 80050aa:	4630      	mov	r0, r6
 80050ac:	f7ff ffda 	bl	8005064 <__sfputc_r>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d1f3      	bne.n	800509c <__sfputs_r+0xa>
 80050b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050b8 <_vfiprintf_r>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	460d      	mov	r5, r1
 80050be:	b09d      	sub	sp, #116	; 0x74
 80050c0:	4614      	mov	r4, r2
 80050c2:	4698      	mov	r8, r3
 80050c4:	4606      	mov	r6, r0
 80050c6:	b118      	cbz	r0, 80050d0 <_vfiprintf_r+0x18>
 80050c8:	6983      	ldr	r3, [r0, #24]
 80050ca:	b90b      	cbnz	r3, 80050d0 <_vfiprintf_r+0x18>
 80050cc:	f7ff fde4 	bl	8004c98 <__sinit>
 80050d0:	4b89      	ldr	r3, [pc, #548]	; (80052f8 <_vfiprintf_r+0x240>)
 80050d2:	429d      	cmp	r5, r3
 80050d4:	d11b      	bne.n	800510e <_vfiprintf_r+0x56>
 80050d6:	6875      	ldr	r5, [r6, #4]
 80050d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050da:	07d9      	lsls	r1, r3, #31
 80050dc:	d405      	bmi.n	80050ea <_vfiprintf_r+0x32>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	059a      	lsls	r2, r3, #22
 80050e2:	d402      	bmi.n	80050ea <_vfiprintf_r+0x32>
 80050e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e6:	f7ff fe75 	bl	8004dd4 <__retarget_lock_acquire_recursive>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	071b      	lsls	r3, r3, #28
 80050ee:	d501      	bpl.n	80050f4 <_vfiprintf_r+0x3c>
 80050f0:	692b      	ldr	r3, [r5, #16]
 80050f2:	b9eb      	cbnz	r3, 8005130 <_vfiprintf_r+0x78>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff fc46 	bl	8004988 <__swsetup_r>
 80050fc:	b1c0      	cbz	r0, 8005130 <_vfiprintf_r+0x78>
 80050fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005100:	07dc      	lsls	r4, r3, #31
 8005102:	d50e      	bpl.n	8005122 <_vfiprintf_r+0x6a>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	b01d      	add	sp, #116	; 0x74
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510e:	4b7b      	ldr	r3, [pc, #492]	; (80052fc <_vfiprintf_r+0x244>)
 8005110:	429d      	cmp	r5, r3
 8005112:	d101      	bne.n	8005118 <_vfiprintf_r+0x60>
 8005114:	68b5      	ldr	r5, [r6, #8]
 8005116:	e7df      	b.n	80050d8 <_vfiprintf_r+0x20>
 8005118:	4b79      	ldr	r3, [pc, #484]	; (8005300 <_vfiprintf_r+0x248>)
 800511a:	429d      	cmp	r5, r3
 800511c:	bf08      	it	eq
 800511e:	68f5      	ldreq	r5, [r6, #12]
 8005120:	e7da      	b.n	80050d8 <_vfiprintf_r+0x20>
 8005122:	89ab      	ldrh	r3, [r5, #12]
 8005124:	0598      	lsls	r0, r3, #22
 8005126:	d4ed      	bmi.n	8005104 <_vfiprintf_r+0x4c>
 8005128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800512a:	f7ff fe54 	bl	8004dd6 <__retarget_lock_release_recursive>
 800512e:	e7e9      	b.n	8005104 <_vfiprintf_r+0x4c>
 8005130:	2300      	movs	r3, #0
 8005132:	9309      	str	r3, [sp, #36]	; 0x24
 8005134:	2320      	movs	r3, #32
 8005136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800513a:	f8cd 800c 	str.w	r8, [sp, #12]
 800513e:	2330      	movs	r3, #48	; 0x30
 8005140:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005304 <_vfiprintf_r+0x24c>
 8005144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005148:	f04f 0901 	mov.w	r9, #1
 800514c:	4623      	mov	r3, r4
 800514e:	469a      	mov	sl, r3
 8005150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005154:	b10a      	cbz	r2, 800515a <_vfiprintf_r+0xa2>
 8005156:	2a25      	cmp	r2, #37	; 0x25
 8005158:	d1f9      	bne.n	800514e <_vfiprintf_r+0x96>
 800515a:	ebba 0b04 	subs.w	fp, sl, r4
 800515e:	d00b      	beq.n	8005178 <_vfiprintf_r+0xc0>
 8005160:	465b      	mov	r3, fp
 8005162:	4622      	mov	r2, r4
 8005164:	4629      	mov	r1, r5
 8005166:	4630      	mov	r0, r6
 8005168:	f7ff ff93 	bl	8005092 <__sfputs_r>
 800516c:	3001      	adds	r0, #1
 800516e:	f000 80aa 	beq.w	80052c6 <_vfiprintf_r+0x20e>
 8005172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005174:	445a      	add	r2, fp
 8005176:	9209      	str	r2, [sp, #36]	; 0x24
 8005178:	f89a 3000 	ldrb.w	r3, [sl]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80a2 	beq.w	80052c6 <_vfiprintf_r+0x20e>
 8005182:	2300      	movs	r3, #0
 8005184:	f04f 32ff 	mov.w	r2, #4294967295
 8005188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800518c:	f10a 0a01 	add.w	sl, sl, #1
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	9307      	str	r3, [sp, #28]
 8005194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005198:	931a      	str	r3, [sp, #104]	; 0x68
 800519a:	4654      	mov	r4, sl
 800519c:	2205      	movs	r2, #5
 800519e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a2:	4858      	ldr	r0, [pc, #352]	; (8005304 <_vfiprintf_r+0x24c>)
 80051a4:	f7fb f814 	bl	80001d0 <memchr>
 80051a8:	9a04      	ldr	r2, [sp, #16]
 80051aa:	b9d8      	cbnz	r0, 80051e4 <_vfiprintf_r+0x12c>
 80051ac:	06d1      	lsls	r1, r2, #27
 80051ae:	bf44      	itt	mi
 80051b0:	2320      	movmi	r3, #32
 80051b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b6:	0713      	lsls	r3, r2, #28
 80051b8:	bf44      	itt	mi
 80051ba:	232b      	movmi	r3, #43	; 0x2b
 80051bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051c0:	f89a 3000 	ldrb.w	r3, [sl]
 80051c4:	2b2a      	cmp	r3, #42	; 0x2a
 80051c6:	d015      	beq.n	80051f4 <_vfiprintf_r+0x13c>
 80051c8:	9a07      	ldr	r2, [sp, #28]
 80051ca:	4654      	mov	r4, sl
 80051cc:	2000      	movs	r0, #0
 80051ce:	f04f 0c0a 	mov.w	ip, #10
 80051d2:	4621      	mov	r1, r4
 80051d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d8:	3b30      	subs	r3, #48	; 0x30
 80051da:	2b09      	cmp	r3, #9
 80051dc:	d94e      	bls.n	800527c <_vfiprintf_r+0x1c4>
 80051de:	b1b0      	cbz	r0, 800520e <_vfiprintf_r+0x156>
 80051e0:	9207      	str	r2, [sp, #28]
 80051e2:	e014      	b.n	800520e <_vfiprintf_r+0x156>
 80051e4:	eba0 0308 	sub.w	r3, r0, r8
 80051e8:	fa09 f303 	lsl.w	r3, r9, r3
 80051ec:	4313      	orrs	r3, r2
 80051ee:	9304      	str	r3, [sp, #16]
 80051f0:	46a2      	mov	sl, r4
 80051f2:	e7d2      	b.n	800519a <_vfiprintf_r+0xe2>
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	1d19      	adds	r1, r3, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	9103      	str	r1, [sp, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bfbb      	ittet	lt
 8005200:	425b      	neglt	r3, r3
 8005202:	f042 0202 	orrlt.w	r2, r2, #2
 8005206:	9307      	strge	r3, [sp, #28]
 8005208:	9307      	strlt	r3, [sp, #28]
 800520a:	bfb8      	it	lt
 800520c:	9204      	strlt	r2, [sp, #16]
 800520e:	7823      	ldrb	r3, [r4, #0]
 8005210:	2b2e      	cmp	r3, #46	; 0x2e
 8005212:	d10c      	bne.n	800522e <_vfiprintf_r+0x176>
 8005214:	7863      	ldrb	r3, [r4, #1]
 8005216:	2b2a      	cmp	r3, #42	; 0x2a
 8005218:	d135      	bne.n	8005286 <_vfiprintf_r+0x1ce>
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	1d1a      	adds	r2, r3, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	9203      	str	r2, [sp, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfb8      	it	lt
 8005226:	f04f 33ff 	movlt.w	r3, #4294967295
 800522a:	3402      	adds	r4, #2
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005314 <_vfiprintf_r+0x25c>
 8005232:	7821      	ldrb	r1, [r4, #0]
 8005234:	2203      	movs	r2, #3
 8005236:	4650      	mov	r0, sl
 8005238:	f7fa ffca 	bl	80001d0 <memchr>
 800523c:	b140      	cbz	r0, 8005250 <_vfiprintf_r+0x198>
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	eba0 000a 	sub.w	r0, r0, sl
 8005244:	fa03 f000 	lsl.w	r0, r3, r0
 8005248:	9b04      	ldr	r3, [sp, #16]
 800524a:	4303      	orrs	r3, r0
 800524c:	3401      	adds	r4, #1
 800524e:	9304      	str	r3, [sp, #16]
 8005250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005254:	482c      	ldr	r0, [pc, #176]	; (8005308 <_vfiprintf_r+0x250>)
 8005256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800525a:	2206      	movs	r2, #6
 800525c:	f7fa ffb8 	bl	80001d0 <memchr>
 8005260:	2800      	cmp	r0, #0
 8005262:	d03f      	beq.n	80052e4 <_vfiprintf_r+0x22c>
 8005264:	4b29      	ldr	r3, [pc, #164]	; (800530c <_vfiprintf_r+0x254>)
 8005266:	bb1b      	cbnz	r3, 80052b0 <_vfiprintf_r+0x1f8>
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	3307      	adds	r3, #7
 800526c:	f023 0307 	bic.w	r3, r3, #7
 8005270:	3308      	adds	r3, #8
 8005272:	9303      	str	r3, [sp, #12]
 8005274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005276:	443b      	add	r3, r7
 8005278:	9309      	str	r3, [sp, #36]	; 0x24
 800527a:	e767      	b.n	800514c <_vfiprintf_r+0x94>
 800527c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005280:	460c      	mov	r4, r1
 8005282:	2001      	movs	r0, #1
 8005284:	e7a5      	b.n	80051d2 <_vfiprintf_r+0x11a>
 8005286:	2300      	movs	r3, #0
 8005288:	3401      	adds	r4, #1
 800528a:	9305      	str	r3, [sp, #20]
 800528c:	4619      	mov	r1, r3
 800528e:	f04f 0c0a 	mov.w	ip, #10
 8005292:	4620      	mov	r0, r4
 8005294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005298:	3a30      	subs	r2, #48	; 0x30
 800529a:	2a09      	cmp	r2, #9
 800529c:	d903      	bls.n	80052a6 <_vfiprintf_r+0x1ee>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0c5      	beq.n	800522e <_vfiprintf_r+0x176>
 80052a2:	9105      	str	r1, [sp, #20]
 80052a4:	e7c3      	b.n	800522e <_vfiprintf_r+0x176>
 80052a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052aa:	4604      	mov	r4, r0
 80052ac:	2301      	movs	r3, #1
 80052ae:	e7f0      	b.n	8005292 <_vfiprintf_r+0x1da>
 80052b0:	ab03      	add	r3, sp, #12
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	462a      	mov	r2, r5
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <_vfiprintf_r+0x258>)
 80052b8:	a904      	add	r1, sp, #16
 80052ba:	4630      	mov	r0, r6
 80052bc:	f3af 8000 	nop.w
 80052c0:	4607      	mov	r7, r0
 80052c2:	1c78      	adds	r0, r7, #1
 80052c4:	d1d6      	bne.n	8005274 <_vfiprintf_r+0x1bc>
 80052c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052c8:	07d9      	lsls	r1, r3, #31
 80052ca:	d405      	bmi.n	80052d8 <_vfiprintf_r+0x220>
 80052cc:	89ab      	ldrh	r3, [r5, #12]
 80052ce:	059a      	lsls	r2, r3, #22
 80052d0:	d402      	bmi.n	80052d8 <_vfiprintf_r+0x220>
 80052d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052d4:	f7ff fd7f 	bl	8004dd6 <__retarget_lock_release_recursive>
 80052d8:	89ab      	ldrh	r3, [r5, #12]
 80052da:	065b      	lsls	r3, r3, #25
 80052dc:	f53f af12 	bmi.w	8005104 <_vfiprintf_r+0x4c>
 80052e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052e2:	e711      	b.n	8005108 <_vfiprintf_r+0x50>
 80052e4:	ab03      	add	r3, sp, #12
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	462a      	mov	r2, r5
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <_vfiprintf_r+0x258>)
 80052ec:	a904      	add	r1, sp, #16
 80052ee:	4630      	mov	r0, r6
 80052f0:	f000 f880 	bl	80053f4 <_printf_i>
 80052f4:	e7e4      	b.n	80052c0 <_vfiprintf_r+0x208>
 80052f6:	bf00      	nop
 80052f8:	08005890 	.word	0x08005890
 80052fc:	080058b0 	.word	0x080058b0
 8005300:	08005870 	.word	0x08005870
 8005304:	080058d0 	.word	0x080058d0
 8005308:	080058da 	.word	0x080058da
 800530c:	00000000 	.word	0x00000000
 8005310:	08005093 	.word	0x08005093
 8005314:	080058d6 	.word	0x080058d6

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4699      	mov	r9, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005328:	4293      	cmp	r3, r2
 800532a:	bfb8      	it	lt
 800532c:	4613      	movlt	r3, r2
 800532e:	6033      	str	r3, [r6, #0]
 8005330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005334:	4607      	mov	r7, r0
 8005336:	460c      	mov	r4, r1
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc26      	bgt.n	80053ae <_printf_common+0x96>
 8005360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005364:	1e13      	subs	r3, r2, #0
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d42b      	bmi.n	80053c8 <_printf_common+0xb0>
 8005370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005374:	4649      	mov	r1, r9
 8005376:	4638      	mov	r0, r7
 8005378:	47c0      	blx	r8
 800537a:	3001      	adds	r0, #1
 800537c:	d01e      	beq.n	80053bc <_printf_common+0xa4>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	68e5      	ldr	r5, [r4, #12]
 8005382:	6832      	ldr	r2, [r6, #0]
 8005384:	f003 0306 	and.w	r3, r3, #6
 8005388:	2b04      	cmp	r3, #4
 800538a:	bf08      	it	eq
 800538c:	1aad      	subeq	r5, r5, r2
 800538e:	68a3      	ldr	r3, [r4, #8]
 8005390:	6922      	ldr	r2, [r4, #16]
 8005392:	bf0c      	ite	eq
 8005394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005398:	2500      	movne	r5, #0
 800539a:	4293      	cmp	r3, r2
 800539c:	bfc4      	itt	gt
 800539e:	1a9b      	subgt	r3, r3, r2
 80053a0:	18ed      	addgt	r5, r5, r3
 80053a2:	2600      	movs	r6, #0
 80053a4:	341a      	adds	r4, #26
 80053a6:	42b5      	cmp	r5, r6
 80053a8:	d11a      	bne.n	80053e0 <_printf_common+0xc8>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e008      	b.n	80053c0 <_printf_common+0xa8>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4652      	mov	r2, sl
 80053b2:	4649      	mov	r1, r9
 80053b4:	4638      	mov	r0, r7
 80053b6:	47c0      	blx	r8
 80053b8:	3001      	adds	r0, #1
 80053ba:	d103      	bne.n	80053c4 <_printf_common+0xac>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	3501      	adds	r5, #1
 80053c6:	e7c6      	b.n	8005356 <_printf_common+0x3e>
 80053c8:	18e1      	adds	r1, r4, r3
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	2030      	movs	r0, #48	; 0x30
 80053ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053d2:	4422      	add	r2, r4
 80053d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053dc:	3302      	adds	r3, #2
 80053de:	e7c7      	b.n	8005370 <_printf_common+0x58>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4622      	mov	r2, r4
 80053e4:	4649      	mov	r1, r9
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0e6      	beq.n	80053bc <_printf_common+0xa4>
 80053ee:	3601      	adds	r6, #1
 80053f0:	e7d9      	b.n	80053a6 <_printf_common+0x8e>
	...

080053f4 <_printf_i>:
 80053f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	7e0f      	ldrb	r7, [r1, #24]
 80053fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053fc:	2f78      	cmp	r7, #120	; 0x78
 80053fe:	4691      	mov	r9, r2
 8005400:	4680      	mov	r8, r0
 8005402:	460c      	mov	r4, r1
 8005404:	469a      	mov	sl, r3
 8005406:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800540a:	d807      	bhi.n	800541c <_printf_i+0x28>
 800540c:	2f62      	cmp	r7, #98	; 0x62
 800540e:	d80a      	bhi.n	8005426 <_printf_i+0x32>
 8005410:	2f00      	cmp	r7, #0
 8005412:	f000 80d8 	beq.w	80055c6 <_printf_i+0x1d2>
 8005416:	2f58      	cmp	r7, #88	; 0x58
 8005418:	f000 80a3 	beq.w	8005562 <_printf_i+0x16e>
 800541c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005424:	e03a      	b.n	800549c <_printf_i+0xa8>
 8005426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800542a:	2b15      	cmp	r3, #21
 800542c:	d8f6      	bhi.n	800541c <_printf_i+0x28>
 800542e:	a101      	add	r1, pc, #4	; (adr r1, 8005434 <_printf_i+0x40>)
 8005430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005434:	0800548d 	.word	0x0800548d
 8005438:	080054a1 	.word	0x080054a1
 800543c:	0800541d 	.word	0x0800541d
 8005440:	0800541d 	.word	0x0800541d
 8005444:	0800541d 	.word	0x0800541d
 8005448:	0800541d 	.word	0x0800541d
 800544c:	080054a1 	.word	0x080054a1
 8005450:	0800541d 	.word	0x0800541d
 8005454:	0800541d 	.word	0x0800541d
 8005458:	0800541d 	.word	0x0800541d
 800545c:	0800541d 	.word	0x0800541d
 8005460:	080055ad 	.word	0x080055ad
 8005464:	080054d1 	.word	0x080054d1
 8005468:	0800558f 	.word	0x0800558f
 800546c:	0800541d 	.word	0x0800541d
 8005470:	0800541d 	.word	0x0800541d
 8005474:	080055cf 	.word	0x080055cf
 8005478:	0800541d 	.word	0x0800541d
 800547c:	080054d1 	.word	0x080054d1
 8005480:	0800541d 	.word	0x0800541d
 8005484:	0800541d 	.word	0x0800541d
 8005488:	08005597 	.word	0x08005597
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	602a      	str	r2, [r5, #0]
 8005494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800549c:	2301      	movs	r3, #1
 800549e:	e0a3      	b.n	80055e8 <_printf_i+0x1f4>
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	6829      	ldr	r1, [r5, #0]
 80054a4:	0606      	lsls	r6, r0, #24
 80054a6:	f101 0304 	add.w	r3, r1, #4
 80054aa:	d50a      	bpl.n	80054c2 <_printf_i+0xce>
 80054ac:	680e      	ldr	r6, [r1, #0]
 80054ae:	602b      	str	r3, [r5, #0]
 80054b0:	2e00      	cmp	r6, #0
 80054b2:	da03      	bge.n	80054bc <_printf_i+0xc8>
 80054b4:	232d      	movs	r3, #45	; 0x2d
 80054b6:	4276      	negs	r6, r6
 80054b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054bc:	485e      	ldr	r0, [pc, #376]	; (8005638 <_printf_i+0x244>)
 80054be:	230a      	movs	r3, #10
 80054c0:	e019      	b.n	80054f6 <_printf_i+0x102>
 80054c2:	680e      	ldr	r6, [r1, #0]
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054ca:	bf18      	it	ne
 80054cc:	b236      	sxthne	r6, r6
 80054ce:	e7ef      	b.n	80054b0 <_printf_i+0xbc>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	6820      	ldr	r0, [r4, #0]
 80054d4:	1d19      	adds	r1, r3, #4
 80054d6:	6029      	str	r1, [r5, #0]
 80054d8:	0601      	lsls	r1, r0, #24
 80054da:	d501      	bpl.n	80054e0 <_printf_i+0xec>
 80054dc:	681e      	ldr	r6, [r3, #0]
 80054de:	e002      	b.n	80054e6 <_printf_i+0xf2>
 80054e0:	0646      	lsls	r6, r0, #25
 80054e2:	d5fb      	bpl.n	80054dc <_printf_i+0xe8>
 80054e4:	881e      	ldrh	r6, [r3, #0]
 80054e6:	4854      	ldr	r0, [pc, #336]	; (8005638 <_printf_i+0x244>)
 80054e8:	2f6f      	cmp	r7, #111	; 0x6f
 80054ea:	bf0c      	ite	eq
 80054ec:	2308      	moveq	r3, #8
 80054ee:	230a      	movne	r3, #10
 80054f0:	2100      	movs	r1, #0
 80054f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054f6:	6865      	ldr	r5, [r4, #4]
 80054f8:	60a5      	str	r5, [r4, #8]
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	bfa2      	ittt	ge
 80054fe:	6821      	ldrge	r1, [r4, #0]
 8005500:	f021 0104 	bicge.w	r1, r1, #4
 8005504:	6021      	strge	r1, [r4, #0]
 8005506:	b90e      	cbnz	r6, 800550c <_printf_i+0x118>
 8005508:	2d00      	cmp	r5, #0
 800550a:	d04d      	beq.n	80055a8 <_printf_i+0x1b4>
 800550c:	4615      	mov	r5, r2
 800550e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005512:	fb03 6711 	mls	r7, r3, r1, r6
 8005516:	5dc7      	ldrb	r7, [r0, r7]
 8005518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800551c:	4637      	mov	r7, r6
 800551e:	42bb      	cmp	r3, r7
 8005520:	460e      	mov	r6, r1
 8005522:	d9f4      	bls.n	800550e <_printf_i+0x11a>
 8005524:	2b08      	cmp	r3, #8
 8005526:	d10b      	bne.n	8005540 <_printf_i+0x14c>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	07de      	lsls	r6, r3, #31
 800552c:	d508      	bpl.n	8005540 <_printf_i+0x14c>
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	6861      	ldr	r1, [r4, #4]
 8005532:	4299      	cmp	r1, r3
 8005534:	bfde      	ittt	le
 8005536:	2330      	movle	r3, #48	; 0x30
 8005538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800553c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005540:	1b52      	subs	r2, r2, r5
 8005542:	6122      	str	r2, [r4, #16]
 8005544:	f8cd a000 	str.w	sl, [sp]
 8005548:	464b      	mov	r3, r9
 800554a:	aa03      	add	r2, sp, #12
 800554c:	4621      	mov	r1, r4
 800554e:	4640      	mov	r0, r8
 8005550:	f7ff fee2 	bl	8005318 <_printf_common>
 8005554:	3001      	adds	r0, #1
 8005556:	d14c      	bne.n	80055f2 <_printf_i+0x1fe>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	b004      	add	sp, #16
 800555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005562:	4835      	ldr	r0, [pc, #212]	; (8005638 <_printf_i+0x244>)
 8005564:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005568:	6829      	ldr	r1, [r5, #0]
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005570:	6029      	str	r1, [r5, #0]
 8005572:	061d      	lsls	r5, r3, #24
 8005574:	d514      	bpl.n	80055a0 <_printf_i+0x1ac>
 8005576:	07df      	lsls	r7, r3, #31
 8005578:	bf44      	itt	mi
 800557a:	f043 0320 	orrmi.w	r3, r3, #32
 800557e:	6023      	strmi	r3, [r4, #0]
 8005580:	b91e      	cbnz	r6, 800558a <_printf_i+0x196>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	f023 0320 	bic.w	r3, r3, #32
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	2310      	movs	r3, #16
 800558c:	e7b0      	b.n	80054f0 <_printf_i+0xfc>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	f043 0320 	orr.w	r3, r3, #32
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	2378      	movs	r3, #120	; 0x78
 8005598:	4828      	ldr	r0, [pc, #160]	; (800563c <_printf_i+0x248>)
 800559a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800559e:	e7e3      	b.n	8005568 <_printf_i+0x174>
 80055a0:	0659      	lsls	r1, r3, #25
 80055a2:	bf48      	it	mi
 80055a4:	b2b6      	uxthmi	r6, r6
 80055a6:	e7e6      	b.n	8005576 <_printf_i+0x182>
 80055a8:	4615      	mov	r5, r2
 80055aa:	e7bb      	b.n	8005524 <_printf_i+0x130>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	6826      	ldr	r6, [r4, #0]
 80055b0:	6961      	ldr	r1, [r4, #20]
 80055b2:	1d18      	adds	r0, r3, #4
 80055b4:	6028      	str	r0, [r5, #0]
 80055b6:	0635      	lsls	r5, r6, #24
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	d501      	bpl.n	80055c0 <_printf_i+0x1cc>
 80055bc:	6019      	str	r1, [r3, #0]
 80055be:	e002      	b.n	80055c6 <_printf_i+0x1d2>
 80055c0:	0670      	lsls	r0, r6, #25
 80055c2:	d5fb      	bpl.n	80055bc <_printf_i+0x1c8>
 80055c4:	8019      	strh	r1, [r3, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6123      	str	r3, [r4, #16]
 80055ca:	4615      	mov	r5, r2
 80055cc:	e7ba      	b.n	8005544 <_printf_i+0x150>
 80055ce:	682b      	ldr	r3, [r5, #0]
 80055d0:	1d1a      	adds	r2, r3, #4
 80055d2:	602a      	str	r2, [r5, #0]
 80055d4:	681d      	ldr	r5, [r3, #0]
 80055d6:	6862      	ldr	r2, [r4, #4]
 80055d8:	2100      	movs	r1, #0
 80055da:	4628      	mov	r0, r5
 80055dc:	f7fa fdf8 	bl	80001d0 <memchr>
 80055e0:	b108      	cbz	r0, 80055e6 <_printf_i+0x1f2>
 80055e2:	1b40      	subs	r0, r0, r5
 80055e4:	6060      	str	r0, [r4, #4]
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	2300      	movs	r3, #0
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f0:	e7a8      	b.n	8005544 <_printf_i+0x150>
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	462a      	mov	r2, r5
 80055f6:	4649      	mov	r1, r9
 80055f8:	4640      	mov	r0, r8
 80055fa:	47d0      	blx	sl
 80055fc:	3001      	adds	r0, #1
 80055fe:	d0ab      	beq.n	8005558 <_printf_i+0x164>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	079b      	lsls	r3, r3, #30
 8005604:	d413      	bmi.n	800562e <_printf_i+0x23a>
 8005606:	68e0      	ldr	r0, [r4, #12]
 8005608:	9b03      	ldr	r3, [sp, #12]
 800560a:	4298      	cmp	r0, r3
 800560c:	bfb8      	it	lt
 800560e:	4618      	movlt	r0, r3
 8005610:	e7a4      	b.n	800555c <_printf_i+0x168>
 8005612:	2301      	movs	r3, #1
 8005614:	4632      	mov	r2, r6
 8005616:	4649      	mov	r1, r9
 8005618:	4640      	mov	r0, r8
 800561a:	47d0      	blx	sl
 800561c:	3001      	adds	r0, #1
 800561e:	d09b      	beq.n	8005558 <_printf_i+0x164>
 8005620:	3501      	adds	r5, #1
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	9903      	ldr	r1, [sp, #12]
 8005626:	1a5b      	subs	r3, r3, r1
 8005628:	42ab      	cmp	r3, r5
 800562a:	dcf2      	bgt.n	8005612 <_printf_i+0x21e>
 800562c:	e7eb      	b.n	8005606 <_printf_i+0x212>
 800562e:	2500      	movs	r5, #0
 8005630:	f104 0619 	add.w	r6, r4, #25
 8005634:	e7f5      	b.n	8005622 <_printf_i+0x22e>
 8005636:	bf00      	nop
 8005638:	080058e1 	.word	0x080058e1
 800563c:	080058f2 	.word	0x080058f2

08005640 <_sbrk_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4d06      	ldr	r5, [pc, #24]	; (800565c <_sbrk_r+0x1c>)
 8005644:	2300      	movs	r3, #0
 8005646:	4604      	mov	r4, r0
 8005648:	4608      	mov	r0, r1
 800564a:	602b      	str	r3, [r5, #0]
 800564c:	f7fb fadc 	bl	8000c08 <_sbrk>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_sbrk_r+0x1a>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_sbrk_r+0x1a>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	200001f8 	.word	0x200001f8

08005660 <__sread>:
 8005660:	b510      	push	{r4, lr}
 8005662:	460c      	mov	r4, r1
 8005664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005668:	f000 f8a0 	bl	80057ac <_read_r>
 800566c:	2800      	cmp	r0, #0
 800566e:	bfab      	itete	ge
 8005670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005672:	89a3      	ldrhlt	r3, [r4, #12]
 8005674:	181b      	addge	r3, r3, r0
 8005676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800567a:	bfac      	ite	ge
 800567c:	6563      	strge	r3, [r4, #84]	; 0x54
 800567e:	81a3      	strhlt	r3, [r4, #12]
 8005680:	bd10      	pop	{r4, pc}

08005682 <__swrite>:
 8005682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005686:	461f      	mov	r7, r3
 8005688:	898b      	ldrh	r3, [r1, #12]
 800568a:	05db      	lsls	r3, r3, #23
 800568c:	4605      	mov	r5, r0
 800568e:	460c      	mov	r4, r1
 8005690:	4616      	mov	r6, r2
 8005692:	d505      	bpl.n	80056a0 <__swrite+0x1e>
 8005694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005698:	2302      	movs	r3, #2
 800569a:	2200      	movs	r2, #0
 800569c:	f000 f868 	bl	8005770 <_lseek_r>
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	4632      	mov	r2, r6
 80056ae:	463b      	mov	r3, r7
 80056b0:	4628      	mov	r0, r5
 80056b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056b6:	f000 b817 	b.w	80056e8 <_write_r>

080056ba <__sseek>:
 80056ba:	b510      	push	{r4, lr}
 80056bc:	460c      	mov	r4, r1
 80056be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c2:	f000 f855 	bl	8005770 <_lseek_r>
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	bf15      	itete	ne
 80056cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056d6:	81a3      	strheq	r3, [r4, #12]
 80056d8:	bf18      	it	ne
 80056da:	81a3      	strhne	r3, [r4, #12]
 80056dc:	bd10      	pop	{r4, pc}

080056de <__sclose>:
 80056de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e2:	f000 b813 	b.w	800570c <_close_r>
	...

080056e8 <_write_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d07      	ldr	r5, [pc, #28]	; (8005708 <_write_r+0x20>)
 80056ec:	4604      	mov	r4, r0
 80056ee:	4608      	mov	r0, r1
 80056f0:	4611      	mov	r1, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	602a      	str	r2, [r5, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f7fb fa35 	bl	8000b66 <_write>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_write_r+0x1e>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b103      	cbz	r3, 8005706 <_write_r+0x1e>
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	200001f8 	.word	0x200001f8

0800570c <_close_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d06      	ldr	r5, [pc, #24]	; (8005728 <_close_r+0x1c>)
 8005710:	2300      	movs	r3, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	f7fb fa41 	bl	8000b9e <_close>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_close_r+0x1a>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_close_r+0x1a>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	200001f8 	.word	0x200001f8

0800572c <_fstat_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d07      	ldr	r5, [pc, #28]	; (800574c <_fstat_r+0x20>)
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	4611      	mov	r1, r2
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	f7fb fa3c 	bl	8000bb6 <_fstat>
 800573e:	1c43      	adds	r3, r0, #1
 8005740:	d102      	bne.n	8005748 <_fstat_r+0x1c>
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	b103      	cbz	r3, 8005748 <_fstat_r+0x1c>
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	bd38      	pop	{r3, r4, r5, pc}
 800574a:	bf00      	nop
 800574c:	200001f8 	.word	0x200001f8

08005750 <_isatty_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4d06      	ldr	r5, [pc, #24]	; (800576c <_isatty_r+0x1c>)
 8005754:	2300      	movs	r3, #0
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	f7fb fa3b 	bl	8000bd6 <_isatty>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_isatty_r+0x1a>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_isatty_r+0x1a>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	200001f8 	.word	0x200001f8

08005770 <_lseek_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4d07      	ldr	r5, [pc, #28]	; (8005790 <_lseek_r+0x20>)
 8005774:	4604      	mov	r4, r0
 8005776:	4608      	mov	r0, r1
 8005778:	4611      	mov	r1, r2
 800577a:	2200      	movs	r2, #0
 800577c:	602a      	str	r2, [r5, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f7fb fa34 	bl	8000bec <_lseek>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_lseek_r+0x1e>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	b103      	cbz	r3, 800578e <_lseek_r+0x1e>
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	200001f8 	.word	0x200001f8

08005794 <__malloc_lock>:
 8005794:	4801      	ldr	r0, [pc, #4]	; (800579c <__malloc_lock+0x8>)
 8005796:	f7ff bb1d 	b.w	8004dd4 <__retarget_lock_acquire_recursive>
 800579a:	bf00      	nop
 800579c:	200001ec 	.word	0x200001ec

080057a0 <__malloc_unlock>:
 80057a0:	4801      	ldr	r0, [pc, #4]	; (80057a8 <__malloc_unlock+0x8>)
 80057a2:	f7ff bb18 	b.w	8004dd6 <__retarget_lock_release_recursive>
 80057a6:	bf00      	nop
 80057a8:	200001ec 	.word	0x200001ec

080057ac <_read_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d07      	ldr	r5, [pc, #28]	; (80057cc <_read_r+0x20>)
 80057b0:	4604      	mov	r4, r0
 80057b2:	4608      	mov	r0, r1
 80057b4:	4611      	mov	r1, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f7fb f9b6 	bl	8000b2c <_read>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_read_r+0x1e>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_read_r+0x1e>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	200001f8 	.word	0x200001f8

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
